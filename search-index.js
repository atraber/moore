var searchIndex = {};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"ANSIGenericString","ansi_term","An ANSIGenericString includes a generic string type and a Style to display that string.  ANSIString and ANSIByteString are aliases for this type on str and [u8], respectively.",null,null],[3,"Prefix","","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",0,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",1,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",1,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",1,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",1,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",1,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",1,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",1,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",1,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",1,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",1,null],[5,"ANSIStrings","","A function to construct an ANSIStrings instance.",null,null],[5,"ANSIByteStrings","","A function to construct an ANSIByteStrings instance.",null,null],[6,"ANSIString","","An ANSI String is a string coupled with the Style to display it in a terminal.",null,null],[6,"ANSIByteString","","An ANSIByteString represents a formatted series of bytes.  Use ANSIByteString when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ansigenericstring"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"infix"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write an ANSIByteString to an io::Write.  This writes the escape sequences for the associated Style around the bytes.",7,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"colour"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don't have to use Blue.normal() just to get blue text.",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"prefix","","The prefix for this colour.",1,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"suffix","","The suffix for this colour.",1,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"infix","","The infix between this colour and another.",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"infix"}}],[11,"bold","","Returns a Style with the bold property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the strikethrough property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new Style with no differences.",8,{"inputs":[],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"prefix","","The prefix for this style.",8,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"suffix","","The suffix for this style.",8,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"infix","","The infix between this style and another.",8,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"infix"}}],[11,"bold","","Returns a Style with the bold property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the hidden property set.",8,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fg","","Returns a Style with the foreground colour property set.",8,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",8,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"style"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write ANSIByteStrings to an io::Write.  This writes the minimal escape sequences for the associated Styles around each set of bytes.",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[3,"ANSIGenericStrings"],[4,"Colour"],[3,"ANSIGenericString"],[3,"Prefix"],[3,"Suffix"],[3,"Infix"],[6,"ANSIString"],[6,"ANSIByteString"],[3,"Style"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is not a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary serialization strategy.","items":[[3,"RefBox","bincode","A struct for encoding nested reference types.",null,null],[3,"StrBox","","Like a RefBox, but encoding from a `str` and decoedes to a `String`.",null,null],[3,"SliceBox","","Like a RefBox, but encodes from a `[T]` and encodes to a `Vec<T>`.",null,null],[4,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[13,"Infinite","","",0,null],[13,"Bounded","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"refbox"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"strbox"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"ordering"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"slicebox"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",1,{"inputs":[{"name":"t"}],"output":{"name":"refbox"}}],[11,"take","","Takes the value out of this refbox.",1,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"try_take","","Tries to take the value out of this refbox.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new StrBox that looks at a borrowed value.",2,{"inputs":[{"name":"str"}],"output":{"name":"strbox"}}],[11,"into_string","","Extract a String from a StrBox.",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_owned","","Convert to an Owned `SliceBox`.",2,{"inputs":[{"name":"self"}],"output":{"name":"strbox"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"boxed","","Creates a new StrBox made from an allocated String.",2,{"inputs":[{"name":"string"}],"output":{"name":"strbox"}}],[11,"take","","Takes the value out of this refbox.",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"try_take","","Tries to take the value out of this refbox.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",3,null],[11,"into_vec","","Extract a `Vec<T>` from a `SliceBox`.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_owned","","Convert to an Owned `SliceBox`.",3,{"inputs":[{"name":"self"}],"output":{"name":"slicebox"}}],[11,"boxed","","Creates a new SliceBox made from an allocated `Vec<T>`.",3,{"inputs":[{"name":"vec"}],"output":{"name":"slicebox"}}],[11,"take","","Takes the value out of this refbox.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"try_take","","Tries to take the value out of this refbox.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",3,null],[0,"rustc_serialize","","A collection of serialization and deserialization functions that use the `rustc_serialize` crate for the encodable and decodable implementation.",null,null],[3,"SizeChecker","bincode::rustc_serialize","",null,null],[12,"size_limit","","",4,null],[12,"written","","",4,null],[3,"EncoderWriter","","An Encoder that encodes values directly into a Writer.",null,null],[3,"DecoderReader","","A Decoder that reads bytes from a buffer.",null,null],[3,"InvalidEncoding","","",null,null],[12,"desc","","",5,null],[12,"detail","","",5,null],[4,"EncodingError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",6,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",6,null],[4,"DecodingError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used during decoding, that error will be stored and returned here.",7,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid encoding, this error will be returned.  This error is only possible if a stream is corrupted.  A stream produced from `encode` or `encode_into` should never produce an InvalidEncoding error.",7,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this error is returned.",7,null],[5,"encode","","Encodes an encodable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode","","Decodes a slice of bytes into an object.",null,null],[5,"encode_into","","Encodes an object directly into a `Writer`.",null,{"inputs":[{"name":"t"},{"name":"w"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode_from","","Decoes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decodingresult"}}],[5,"encoded_size","","Returns the size that an object would be if encoded using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"encoded_size_bounded","","Given a maximum size limit, check how large an object would be if it were to be encoded.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"invalidencoding"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"invalidencoding"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"invalidencoding"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",7,{"inputs":[{"name":"ioerror"}],"output":{"name":"decodingerror"}}],[11,"new","","",8,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decoderreader"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read_nil","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_usize","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_u64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_u32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_u16","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_u8","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_isize","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_i64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_i32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_i16","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_i8","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_bool","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_f64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_f32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_char","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_str","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_enum","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_enum_variant","","",8,null],[11,"read_enum_variant_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_enum_struct_variant","","",8,null],[11,"read_enum_struct_variant_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_struct_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple_struct_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_option","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_seq","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_seq_elt","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_map","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_map_elt_key","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_map_elt_val","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"error","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodingerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",9,{"inputs":[{"name":"w"}],"output":{"name":"encoderwriter"}}],[11,"new","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"sizechecker"}}],[11,"emit_nil","","",9,{"inputs":[{"name":"self"}],"output":{"name":"encodingresult"}}],[11,"emit_usize","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encodingresult"}}],[11,"emit_u64","","",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encodingresult"}}],[11,"emit_u32","","",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encodingresult"}}],[11,"emit_u16","","",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encodingresult"}}],[11,"emit_u8","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encodingresult"}}],[11,"emit_isize","","",9,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encodingresult"}}],[11,"emit_i64","","",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encodingresult"}}],[11,"emit_i32","","",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encodingresult"}}],[11,"emit_i16","","",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encodingresult"}}],[11,"emit_i8","","",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encodingresult"}}],[11,"emit_bool","","",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encodingresult"}}],[11,"emit_f64","","",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encodingresult"}}],[11,"emit_f32","","",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encodingresult"}}],[11,"emit_char","","",9,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encodingresult"}}],[11,"emit_str","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encodingresult"}}],[11,"emit_enum","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant_arg","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant_field","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct_field","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_arg","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct_arg","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option_none","","",9,{"inputs":[{"name":"self"}],"output":{"name":"encodingresult"}}],[11,"emit_option_some","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq_elt","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_key","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_val","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_nil","","",4,{"inputs":[{"name":"self"}],"output":{"name":"encodingresult"}}],[11,"emit_usize","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encodingresult"}}],[11,"emit_u64","","",4,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encodingresult"}}],[11,"emit_u32","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encodingresult"}}],[11,"emit_u16","","",4,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encodingresult"}}],[11,"emit_u8","","",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encodingresult"}}],[11,"emit_isize","","",4,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encodingresult"}}],[11,"emit_i64","","",4,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encodingresult"}}],[11,"emit_i32","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encodingresult"}}],[11,"emit_i16","","",4,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encodingresult"}}],[11,"emit_i8","","",4,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encodingresult"}}],[11,"emit_bool","","",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encodingresult"}}],[11,"emit_f64","","",4,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encodingresult"}}],[11,"emit_f32","","",4,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encodingresult"}}],[11,"emit_char","","",4,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encodingresult"}}],[11,"emit_str","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encodingresult"}}],[11,"emit_enum","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant_arg","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant_field","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct_field","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_arg","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct_arg","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option_none","","",4,{"inputs":[{"name":"self"}],"output":{"name":"encodingresult"}}],[11,"emit_option_some","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq_elt","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_key","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_val","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[6,"EncodingResult","","",null,null],[6,"DecodingResult","","",null,null],[0,"serde","bincode","A collection of serialization and deserialization functions that use the `serde` crate for the serializable and deserializable implementation.",null,null],[3,"Deserializer","bincode::serde","A Deserializer that reads bytes from a buffer.",null,null],[3,"InvalidEncoding","","",null,null],[12,"desc","","",10,null],[12,"detail","","",10,null],[3,"Serializer","","An Serializer that encodes values directly into a Writer.",null,null],[4,"DeserializeError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used during decoding, that error will be stored and returned here.",11,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid encoding, this error will be returned.  This error is only possible if a stream is corrupted.  A stream produced from `encode` or `encode_into` should never produce an InvalidEncoding error.",11,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this error is returned.",11,null],[13,"Serde","","",11,null],[4,"SerializeError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",12,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",12,null],[13,"Custom","","A custom error message",12,null],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialized_size","","Returns the size that an object would be if serialized using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"serialized_size_bounded","","Given a maximum size limit, check how large an object would be if it were to be serialized.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[5,"deserialize_from","","Deserializes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializeresult"}}],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"invalidencoding"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"invalidencoding"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"invalidencoding"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",11,{"inputs":[{"name":"ioerror"}],"output":{"name":"deserializeerror"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"deserializeerror"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",11,{"inputs":[{"name":"t"}],"output":{"name":"deserializeerror"}}],[11,"end_of_stream","","",11,{"inputs":[],"output":{"name":"deserializeerror"}}],[11,"new","","",13,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializer"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deserialize","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_usize","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_isize","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_enum","","",13,null],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_seq_fixed_size","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"visit_variant","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",13,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",14,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"serialize_unit","","",14,{"inputs":[{"name":"self"}],"output":{"name":"serializeresult"}}],[11,"serialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"serializeresult"}}],[11,"serialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"serializeresult"}}],[11,"serialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"serializeresult"}}],[11,"serialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"serializeresult"}}],[11,"serialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"serializeresult"}}],[11,"serialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"serializeresult"}}],[11,"serialize_usize","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"serializeresult"}}],[11,"serialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"serializeresult"}}],[11,"serialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"serializeresult"}}],[11,"serialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"serializeresult"}}],[11,"serialize_isize","","",14,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"serializeresult"}}],[11,"serialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"serializeresult"}}],[11,"serialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"serializeresult"}}],[11,"serialize_str","","",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"serializeresult"}}],[11,"serialize_char","","",14,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"serializeresult"}}],[11,"serialize_bytes","","",14,null],[11,"serialize_none","","",14,{"inputs":[{"name":"self"}],"output":{"name":"serializeresult"}}],[11,"serialize_some","","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"serializeresult"}}],[11,"serialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"serializeresult"}}],[11,"serialize_seq_elt","","",14,null],[11,"serialize_seq_end","","",14,null],[11,"serialize_seq_fixed_size","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_tuple_elt","","",14,null],[11,"serialize_tuple_end","","",14,null],[11,"serialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_tuple_struct_elt","","",14,null],[11,"serialize_tuple_struct_end","","",14,null],[11,"serialize_tuple_variant","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_tuple_variant_elt","","",14,null],[11,"serialize_tuple_variant_end","","",14,null],[11,"serialize_map","","",14,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"serializeresult"}}],[11,"serialize_map_key","","",14,null],[11,"serialize_map_value","","",14,null],[11,"serialize_map_end","","",14,null],[11,"serialize_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_struct_elt","","",14,null],[11,"serialize_struct_end","","",14,null],[11,"serialize_struct_variant","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_struct_variant_elt","","",14,null],[11,"serialize_struct_variant_end","","",14,null],[11,"serialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"serializeresult"}}],[11,"serialize_newtype_variant","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"serializeresult"}}],[11,"serialize_unit_variant","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"serializeresult"}}],[6,"DeserializeResult","","",null,null],[6,"SerializeResult","","",null,null],[11,"clone","bincode","",0,{"inputs":[{"name":"self"}],"output":{"name":"sizelimit"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}]],"paths":[[4,"SizeLimit"],[3,"RefBox"],[3,"StrBox"],[3,"SliceBox"],[3,"SizeChecker"],[3,"InvalidEncoding"],[4,"EncodingError"],[4,"DecodingError"],[3,"DecoderReader"],[3,"EncoderWriter"],[3,"InvalidEncoding"],[4,"DeserializeError"],[4,"SerializeError"],[3,"Deserializer"],[3,"Serializer"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[17,"FLAG_A","","",null,null],[17,"FLAG_B","","",null,null],[17,"FLAG_C","","",null,null],[17,"FLAG_ABC","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for `BigEndian`.",null,null],[6,"LE","","A type alias for `LittleEndian`.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["clap"] = {"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formated error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`] [`Arg::set`]: ./struct.Arg.html#method.set [`Arg::unset`]: ./struct.Arg.html#method.unset [`Arg::is_set`]: ./struct.Arg.html#method.is_set",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,null],[13,"Hidden","","The argument should not be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimter",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,null],[13,"HidePossibleValues","","Hides the possible values from the help string",1,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,null],[13,"RequireEquals","","Require options use `--option=val` syntax",1,null],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,null],[13,"HideDefaultValue","","Hides the default value from the help string",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,null],[13,"AllowMissingPositional","","Allows one to implement a CLI where the second to last positional argument is optional, but the final positional argument is required. Such as `$ prog [optional] <required>` where one of the two following usages is allowed:",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcomands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,null],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independant version strings from their parents.)",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,null],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,null],[13,"PropagateGlobalValuesDown","","Specifies that the parser should propagate global arg's values down through any used child subcommands. Meaning, if a subcommand wasn't used, the values won't be propagated down to said subcommand.",2,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'sggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,null],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash-completion completion file for the Bourne Again SHell (BASH)",4,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,null],[13,"PowerShell","","Generates a completion file for PowerShell",4,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"appsettings"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"get_name","","Get the name of the app",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_bin_name","","Get the name of the binary",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"template","","Sets the help template to be used, overriding the default format.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,null],[11,"global_setting","","Enables a single setting that is propogated down through all child [`SubCommand`]s.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"global_settings","","Enables multiple settings which are propogated down through all child [`SubCommand`]s.",5,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to the list of valid possibilties",5,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",5,{"inputs":[{"name":"self"},{"name":"arggroup"}],"output":{"name":"self"}}],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,{"inputs":[{"name":"self"},{"name":"app"}],"output":{"name":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"t"}],"output":null}],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"w"}],"output":null}],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"arg"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,null],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,null],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",6,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,null],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",6,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","Specifies the index of a positional argument starting at 1.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides an argument from help message output.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could  contain non UTF-8 formatted strings.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,null],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,null],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"u64"}}],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"osvalues"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"subcommand"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to this group by name",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to this group by name",11,null],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"argsettings"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,null],[11,"with_description","","Create an error with a custom description.",0,{"inputs":[{"name":"str"},{"name":"errorkind"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"shell"}}],[11,"variants","","A list of possible variants in `&'static str` form",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","Short hand for [`Result`] type [`Result`]: https://doc.rust-lang.org/std/result/enum.Result.html",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",null,null],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",null,null]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",18,null],[12,"sa_data","","",18,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",19,null],[12,"sin_port","","",19,null],[12,"sin_addr","","",19,null],[12,"sin_zero","","",19,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",20,null],[12,"sin6_port","","",20,null],[12,"sin6_flowinfo","","",20,null],[12,"sin6_addr","","",20,null],[12,"sin6_scope_id","","",20,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",21,null],[12,"sun_path","","",21,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",22,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",23,null],[12,"ai_family","","",23,null],[12,"ai_socktype","","",23,null],[12,"ai_protocol","","",23,null],[12,"ai_addrlen","","",23,null],[12,"ai_addr","","",23,null],[12,"ai_canonname","","",23,null],[12,"ai_next","","",23,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",24,null],[12,"nl_pid","","",24,null],[12,"nl_groups","","",24,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",25,null],[12,"sll_protocol","","",25,null],[12,"sll_ifindex","","",25,null],[12,"sll_hatype","","",25,null],[12,"sll_pkttype","","",25,null],[12,"sll_halen","","",25,null],[12,"sll_addr","","",25,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",26,null],[12,"tm_min","","",26,null],[12,"tm_hour","","",26,null],[12,"tm_mday","","",26,null],[12,"tm_mon","","",26,null],[12,"tm_year","","",26,null],[12,"tm_wday","","",26,null],[12,"tm_yday","","",26,null],[12,"tm_isdst","","",26,null],[12,"tm_gmtoff","","",26,null],[12,"tm_zone","","",26,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",27,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",28,null],[12,"dli_fbase","","",28,null],[12,"dli_sname","","",28,null],[12,"dli_saddr","","",28,null],[3,"epoll_event","","",null,null],[12,"events","","",29,null],[12,"u64","","",29,null],[3,"utsname","","",null,null],[12,"sysname","","",30,null],[12,"nodename","","",30,null],[12,"release","","",30,null],[12,"version","","",30,null],[12,"machine","","",30,null],[12,"domainname","","",30,null],[3,"lconv","","",null,null],[12,"decimal_point","","",31,null],[12,"thousands_sep","","",31,null],[12,"grouping","","",31,null],[12,"int_curr_symbol","","",31,null],[12,"currency_symbol","","",31,null],[12,"mon_decimal_point","","",31,null],[12,"mon_thousands_sep","","",31,null],[12,"mon_grouping","","",31,null],[12,"positive_sign","","",31,null],[12,"negative_sign","","",31,null],[12,"int_frac_digits","","",31,null],[12,"frac_digits","","",31,null],[12,"p_cs_precedes","","",31,null],[12,"p_sep_by_space","","",31,null],[12,"n_cs_precedes","","",31,null],[12,"n_sep_by_space","","",31,null],[12,"p_sign_posn","","",31,null],[12,"n_sign_posn","","",31,null],[12,"int_p_cs_precedes","","",31,null],[12,"int_p_sep_by_space","","",31,null],[12,"int_n_cs_precedes","","",31,null],[12,"int_n_sep_by_space","","",31,null],[12,"int_p_sign_posn","","",31,null],[12,"int_n_sign_posn","","",31,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",32,null],[12,"sigev_signo","","",32,null],[12,"sigev_notify","","",32,null],[12,"sigev_notify_thread_id","","",32,null],[3,"dirent","","",null,null],[12,"d_ino","","",33,null],[12,"d_off","","",33,null],[12,"d_reclen","","",33,null],[12,"d_type","","",33,null],[12,"d_name","","",33,null],[3,"dirent64","","",null,null],[12,"d_ino","","",34,null],[12,"d_off","","",34,null],[12,"d_reclen","","",34,null],[12,"d_type","","",34,null],[12,"d_name","","",34,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",35,null],[12,"rlim_max","","",35,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",36,null],[12,"gl_pathv","","",36,null],[12,"gl_offs","","",36,null],[12,"gl_flags","","",36,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",37,null],[12,"ifa_name","","",37,null],[12,"ifa_flags","","",37,null],[12,"ifa_addr","","",37,null],[12,"ifa_netmask","","",37,null],[12,"ifa_ifu","","",37,null],[12,"ifa_data","","",37,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",38,null],[12,"pw_passwd","","",38,null],[12,"pw_uid","","",38,null],[12,"pw_gid","","",38,null],[12,"pw_gecos","","",38,null],[12,"pw_dir","","",38,null],[12,"pw_shell","","",38,null],[3,"spwd","","",null,null],[12,"sp_namp","","",39,null],[12,"sp_pwdp","","",39,null],[12,"sp_lstchg","","",39,null],[12,"sp_min","","",39,null],[12,"sp_max","","",39,null],[12,"sp_warn","","",39,null],[12,"sp_inact","","",39,null],[12,"sp_expire","","",39,null],[12,"sp_flag","","",39,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",40,null],[12,"f_frsize","","",40,null],[12,"f_blocks","","",40,null],[12,"f_bfree","","",40,null],[12,"f_bavail","","",40,null],[12,"f_files","","",40,null],[12,"f_ffree","","",40,null],[12,"f_favail","","",40,null],[12,"f_fsid","","",40,null],[12,"f_flag","","",40,null],[12,"f_namemax","","",40,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",41,null],[12,"dqb_bsoftlimit","","",41,null],[12,"dqb_curspace","","",41,null],[12,"dqb_ihardlimit","","",41,null],[12,"dqb_isoftlimit","","",41,null],[12,"dqb_curinodes","","",41,null],[12,"dqb_btime","","",41,null],[12,"dqb_itime","","",41,null],[12,"dqb_valid","","",41,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",42,null],[12,"ssi_errno","","",42,null],[12,"ssi_code","","",42,null],[12,"ssi_pid","","",42,null],[12,"ssi_uid","","",42,null],[12,"ssi_fd","","",42,null],[12,"ssi_tid","","",42,null],[12,"ssi_band","","",42,null],[12,"ssi_overrun","","",42,null],[12,"ssi_trapno","","",42,null],[12,"ssi_status","","",42,null],[12,"ssi_int","","",42,null],[12,"ssi_ptr","","",42,null],[12,"ssi_utime","","",42,null],[12,"ssi_stime","","",42,null],[12,"ssi_addr","","",42,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",43,null],[12,"mq_maxmsg","","",43,null],[12,"mq_msgsize","","",43,null],[12,"mq_curmsgs","","",43,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",44,null],[12,"if_name","","",44,null],[3,"msginfo","","",null,null],[12,"msgpool","","",45,null],[12,"msgmap","","",45,null],[12,"msgmax","","",45,null],[12,"msgmnb","","",45,null],[12,"msgmni","","",45,null],[12,"msgssz","","",45,null],[12,"msgtql","","",45,null],[12,"msgseg","","",45,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",46,null],[12,"msg_len","","",46,null],[3,"sembuf","","",null,null],[12,"sem_num","","",47,null],[12,"sem_op","","",47,null],[12,"sem_flg","","",47,null],[3,"input_event","","",null,null],[12,"time","","",48,null],[12,"type_","","",48,null],[12,"code","","",48,null],[12,"value","","",48,null],[3,"input_id","","",null,null],[12,"bustype","","",49,null],[12,"vendor","","",49,null],[12,"product","","",49,null],[12,"version","","",49,null],[3,"input_absinfo","","",null,null],[12,"value","","",50,null],[12,"minimum","","",50,null],[12,"maximum","","",50,null],[12,"fuzz","","",50,null],[12,"flat","","",50,null],[12,"resolution","","",50,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",51,null],[12,"len","","",51,null],[12,"index","","",51,null],[12,"keycode","","",51,null],[12,"scancode","","",51,null],[3,"input_mask","","",null,null],[12,"type_","","",52,null],[12,"codes_size","","",52,null],[12,"codes_ptr","","",52,null],[3,"ff_replay","","",null,null],[12,"length","","",53,null],[12,"delay","","",53,null],[3,"ff_trigger","","",null,null],[12,"button","","",54,null],[12,"interval","","",54,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",55,null],[12,"attack_level","","",55,null],[12,"fade_length","","",55,null],[12,"fade_level","","",55,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",56,null],[12,"envelope","","",56,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",57,null],[12,"end_level","","",57,null],[12,"envelope","","",57,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",58,null],[12,"left_saturation","","",58,null],[12,"right_coeff","","",58,null],[12,"left_coeff","","",58,null],[12,"deadband","","",58,null],[12,"center","","",58,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",59,null],[12,"period","","",59,null],[12,"magnitude","","",59,null],[12,"offset","","",59,null],[12,"phase","","",59,null],[12,"envelope","","",59,null],[12,"custom_len","","",59,null],[12,"custom_data","","",59,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",60,null],[12,"weak_magnitude","","",60,null],[3,"ff_effect","","",null,null],[12,"type_","","",61,null],[12,"id","","",61,null],[12,"direction","","",61,null],[12,"trigger","","",61,null],[12,"replay","","",61,null],[12,"u","","",61,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",62,null],[12,"aio_lio_opcode","","",62,null],[12,"aio_reqprio","","",62,null],[12,"aio_buf","","",62,null],[12,"aio_nbytes","","",62,null],[12,"aio_sigevent","","",62,null],[12,"aio_offset","","",62,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",63,null],[12,"e_exit","","",63,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",64,null],[12,"tv_usec","","",64,null],[3,"utmpx","","",null,null],[12,"ut_type","","",65,null],[12,"ut_pid","","",65,null],[12,"ut_line","","",65,null],[12,"ut_id","","",65,null],[12,"ut_user","","",65,null],[12,"ut_host","","",65,null],[12,"ut_exit","","",65,null],[12,"ut_session","","",65,null],[12,"ut_tv","","",65,null],[12,"ut_addr_v6","","",65,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",66,null],[12,"sa_mask","","",66,null],[12,"sa_flags","","",66,null],[12,"sa_restorer","","",66,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",67,null],[12,"ss_flags","","",67,null],[12,"ss_size","","",67,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",68,null],[12,"si_errno","","",68,null],[12,"si_code","","",68,null],[12,"_pad","","",68,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",69,null],[12,"gl_pathv","","",69,null],[12,"gl_offs","","",69,null],[12,"gl_flags","","",69,null],[3,"ucred","","",null,null],[12,"pid","","",70,null],[12,"uid","","",70,null],[12,"gid","","",70,null],[3,"statfs","","",null,null],[12,"f_type","","",71,null],[12,"f_bsize","","",71,null],[12,"f_blocks","","",71,null],[12,"f_bfree","","",71,null],[12,"f_bavail","","",71,null],[12,"f_files","","",71,null],[12,"f_ffree","","",71,null],[12,"f_fsid","","",71,null],[12,"f_namelen","","",71,null],[12,"f_frsize","","",71,null],[3,"msghdr","","",null,null],[12,"msg_name","","",72,null],[12,"msg_namelen","","",72,null],[12,"msg_iov","","",72,null],[12,"msg_iovlen","","",72,null],[12,"msg_control","","",72,null],[12,"msg_controllen","","",72,null],[12,"msg_flags","","",72,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",73,null],[12,"cmsg_level","","",73,null],[12,"cmsg_type","","",73,null],[3,"termios","","",null,null],[12,"c_iflag","","",74,null],[12,"c_oflag","","",74,null],[12,"c_cflag","","",74,null],[12,"c_lflag","","",74,null],[12,"c_line","","",74,null],[12,"c_cc","","",74,null],[12,"c_ispeed","","",74,null],[12,"c_ospeed","","",74,null],[3,"flock","","",null,null],[12,"l_type","","",75,null],[12,"l_whence","","",75,null],[12,"l_start","","",75,null],[12,"l_len","","",75,null],[12,"l_pid","","",75,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",76,null],[12,"loads","","",76,null],[12,"totalram","","",76,null],[12,"freeram","","",76,null],[12,"sharedram","","",76,null],[12,"bufferram","","",76,null],[12,"totalswap","","",76,null],[12,"freeswap","","",76,null],[12,"procs","","",76,null],[12,"pad","","",76,null],[12,"totalhigh","","",76,null],[12,"freehigh","","",76,null],[12,"mem_unit","","",76,null],[12,"_f","","",76,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",77,null],[12,"msg_stime","","",77,null],[12,"msg_rtime","","",77,null],[12,"msg_ctime","","",77,null],[12,"msg_qnum","","",77,null],[12,"msg_qbytes","","",77,null],[12,"msg_lspid","","",77,null],[12,"msg_lrpid","","",77,null],[3,"stat","","",null,null],[12,"st_dev","","",78,null],[12,"st_ino","","",78,null],[12,"st_nlink","","",78,null],[12,"st_mode","","",78,null],[12,"st_uid","","",78,null],[12,"st_gid","","",78,null],[12,"st_rdev","","",78,null],[12,"st_size","","",78,null],[12,"st_blksize","","",78,null],[12,"st_blocks","","",78,null],[12,"st_atime","","",78,null],[12,"st_atime_nsec","","",78,null],[12,"st_mtime","","",78,null],[12,"st_mtime_nsec","","",78,null],[12,"st_ctime","","",78,null],[12,"st_ctime_nsec","","",78,null],[3,"stat64","","",null,null],[12,"st_dev","","",79,null],[12,"st_ino","","",79,null],[12,"st_nlink","","",79,null],[12,"st_mode","","",79,null],[12,"st_uid","","",79,null],[12,"st_gid","","",79,null],[12,"st_rdev","","",79,null],[12,"st_size","","",79,null],[12,"st_blksize","","",79,null],[12,"st_blocks","","",79,null],[12,"st_atime","","",79,null],[12,"st_atime_nsec","","",79,null],[12,"st_mtime","","",79,null],[12,"st_mtime_nsec","","",79,null],[12,"st_ctime","","",79,null],[12,"st_ctime_nsec","","",79,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",80,null],[12,"exponent","","",80,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",81,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",82,null],[12,"swd","","",82,null],[12,"ftw","","",82,null],[12,"fop","","",82,null],[12,"rip","","",82,null],[12,"rdp","","",82,null],[12,"mxcsr","","",82,null],[12,"mxcr_mask","","",82,null],[12,"_st","","",82,null],[12,"_xmm","","",82,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",83,null],[12,"swd","","",83,null],[12,"ftw","","",83,null],[12,"fop","","",83,null],[12,"rip","","",83,null],[12,"rdp","","",83,null],[12,"mxcsr","","",83,null],[12,"mxcr_mask","","",83,null],[12,"st_space","","",83,null],[12,"xmm_space","","",83,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",84,null],[12,"r14","","",84,null],[12,"r13","","",84,null],[12,"r12","","",84,null],[12,"rbp","","",84,null],[12,"rbx","","",84,null],[12,"r11","","",84,null],[12,"r10","","",84,null],[12,"r9","","",84,null],[12,"r8","","",84,null],[12,"rax","","",84,null],[12,"rcx","","",84,null],[12,"rdx","","",84,null],[12,"rsi","","",84,null],[12,"rdi","","",84,null],[12,"orig_rax","","",84,null],[12,"rip","","",84,null],[12,"cs","","",84,null],[12,"eflags","","",84,null],[12,"rsp","","",84,null],[12,"ss","","",84,null],[12,"fs_base","","",84,null],[12,"gs_base","","",84,null],[12,"ds","","",84,null],[12,"es","","",84,null],[12,"fs","","",84,null],[12,"gs","","",84,null],[3,"user","","",null,null],[12,"regs","","",85,null],[12,"u_fpvalid","","",85,null],[12,"i387","","",85,null],[12,"u_tsize","","",85,null],[12,"u_dsize","","",85,null],[12,"u_ssize","","",85,null],[12,"start_code","","",85,null],[12,"start_stack","","",85,null],[12,"signal","","",85,null],[12,"u_ar0","","",85,null],[12,"u_fpstate","","",85,null],[12,"magic","","",85,null],[12,"u_comm","","",85,null],[12,"u_debugreg","","",85,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",86,null],[12,"fpregs","","",86,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",87,null],[12,"uc_link","","",87,null],[12,"uc_stack","","",87,null],[12,"uc_mcontext","","",87,null],[12,"uc_sigmask","","",87,null],[3,"ipc_perm","","",null,null],[12,"__key","","",88,null],[12,"uid","","",88,null],[12,"gid","","",88,null],[12,"cuid","","",88,null],[12,"cgid","","",88,null],[12,"mode","","",88,null],[12,"__seq","","",88,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",89,null],[12,"shm_segsz","","",89,null],[12,"shm_atime","","",89,null],[12,"shm_dtime","","",89,null],[12,"shm_ctime","","",89,null],[12,"shm_cpid","","",89,null],[12,"shm_lpid","","",89,null],[12,"shm_nattch","","",89,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fexecve","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_atfork","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"settimeofday","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"sched_setparam","","",null,null],[5,"sched_getparam","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"sigsuspend","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"personality","","",null,null],[5,"swapon","","",null,null],[5,"swapoff","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"sethostname","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"execvpe","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CMSPAR","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["memmap"] = {"doc":"A cross-platform Rust API for memory maps.","items":[[3,"MmapOptions","memmap","",null,null],[12,"stack","","Indicates that the memory map should be suitable for a stack.",0,null],[3,"Mmap","","A memory-mapped buffer.",null,null],[3,"MmapView","","A view of a memory map.",null,null],[3,"MmapViewSync","","A thread-safe view of a memory map.",null,null],[4,"Protection","","Memory map protection.",null,null],[13,"Read","","A read-only memory map. Writes to the memory map will result in a panic.",1,null],[13,"ReadWrite","","A read-write memory map. Writes to the memory map will be reflected in the file after a call to `Mmap::flush` or after the `Mmap` is dropped.",1,null],[13,"ReadCopy","","A read, copy-on-write memory map. Writes to the memory map will not be carried through to the underlying file. It is unspecified whether changes made to the file after the memory map is created will be visible.",1,null],[13,"ReadExecute","","A readable and executable mapping.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"protection"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"protection"}],"output":{"name":"bool"}}],[11,"write","","Returns `true` if the `Protection` is writable.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mmapoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"mmapoptions"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mmapoptions"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"mmapoptions"}],"output":{"name":"bool"}}],[11,"open","","Opens a file-backed memory map.",2,{"inputs":[{"name":"file"},{"name":"protection"}],"output":{"name":"result"}}],[11,"open_path","","Opens a file-backed memory map.",2,{"inputs":[{"name":"p"},{"name":"protection"}],"output":{"name":"result"}}],[11,"open_with_offset","","Opens a file-backed memory map with the specified offset and length.",2,{"inputs":[{"name":"file"},{"name":"protection"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"anonymous","","Opens an anonymous memory map.",2,{"inputs":[{"name":"usize"},{"name":"protection"}],"output":{"name":"result"}}],[11,"anonymous_with_options","","Opens an anonymous memory map with the provided options.",2,{"inputs":[{"name":"usize"},{"name":"protection"},{"name":"mmapoptions"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_range","","Flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush_async_range","","Asynchronously flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"set_protection","","Change the `Protection` this mapping was created with.",2,{"inputs":[{"name":"self"},{"name":"protection"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a pointer to the mapped memory.",2,null],[11,"mut_ptr","","Returns a pointer to the mapped memory.",2,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",2,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",2,null],[11,"into_view","","Creates a splittable mmap view from the mmap.",2,{"inputs":[{"name":"self"}],"output":{"name":"mmapview"}}],[11,"into_view_sync","","Creates a thread-safe splittable mmap view from the mmap.",2,{"inputs":[{"name":"self"}],"output":{"name":"mmapviewsync"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"restrict","","Restricts the range of the view to the provided offset and length.",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding view modifications to disk.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to disk.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map view.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a shared pointer to the mapped memory.",3,null],[11,"mut_ptr","","Returns a mutable pointer to the mapped memory.",3,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",3,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",3,null],[11,"clone","","Clones the view of the memory map.",3,{"inputs":[{"name":"self"}],"output":{"name":"mmapview"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"restrict","","Restricts the range of this view to the provided offset and length.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding view modifications to disk.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to disk.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map view.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a shared pointer to the mapped memory.",4,null],[11,"mut_ptr","","Returns a mutable pointer to the mapped memory.",4,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",4,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",4,null],[11,"clone","","Clones the view of the memory map.",4,{"inputs":[{"name":"self"}],"output":{"name":"mmapviewsync"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"MmapOptions"],[4,"Protection"],[3,"Mmap"],[3,"MmapView"],[3,"MmapViewSync"]]};
searchIndex["moore"] = {"doc":"","items":[],"paths":[]};
searchIndex["moore_common"] = {"doc":"This crate contains the fundamental utilities used to by the rest of the moore compiler.","items":[[3,"Session","moore_common","",null,null],[12,"opts","","",0,null],[3,"SessionOptions","","",null,null],[12,"ignore_duplicate_defs","","",1,null],[0,"errors","","Utilities to implement diagnostics and error reporting facilities.",null,null],[3,"Handler","moore_common::errors","A handler deals with errors.",null,null],[3,"DiagnosticBuilder","","Used to emit structured error messages.",null,null],[12,"handler","","",2,null],[12,"message","","",2,null],[3,"DiagBuilder2","","",null,null],[12,"severity","","",3,null],[12,"message","","",3,null],[12,"segments","","",3,null],[4,"DiagSegment","","",null,null],[13,"Span","","",4,null],[13,"Note","","",4,null],[4,"Severity","","",null,null],[13,"Note","","",5,null],[13,"Warning","","",5,null],[13,"Error","","",5,null],[13,"Fatal","","",5,null],[6,"DiagResult","","A diagnostic result type. Either carries the result `T` in the Ok variant, or an assembled diagnostic in the Err variant.",null,null],[6,"DiagResult2","","A diagnostic result type. Either carries the result `T` in the Ok variant, or an assembled diagnostic in the Err variant.",null,null],[7,"DUMMY_HANDLER","","",null,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"diagbuilder2"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"diagsegment"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"severity"},{"name":"s"}],"output":{"name":"diagbuilder2"}}],[11,"fatal","","",3,{"inputs":[{"name":"s"}],"output":{"name":"diagbuilder2"}}],[11,"error","","",3,{"inputs":[{"name":"s"}],"output":{"name":"diagbuilder2"}}],[11,"warning","","",3,{"inputs":[{"name":"s"}],"output":{"name":"diagbuilder2"}}],[11,"note","","",3,{"inputs":[{"name":"s"}],"output":{"name":"diagbuilder2"}}],[11,"segment","","",3,{"inputs":[{"name":"self"},{"name":"diagsegment"}],"output":{"name":"diagbuilder2"}}],[11,"span","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"diagbuilder2"}}],[11,"add_note","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"diagbuilder2"}}],[11,"get_severity","","",3,{"inputs":[{"name":"self"}],"output":{"name":"severity"}}],[11,"get_message","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_segments","","",3,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"severity"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"severity"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"severity"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"severity"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_str","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"lexer","moore_common","Lexer utilities.",null,null],[3,"AccumulatingReader","moore_common::lexer","",null,null],[3,"StringReader","","",null,null],[3,"StackedLexer","","A lexer chaining the tokens of multiple other lexers after another. Lexers can be pushed onto an internal stack and will then be queried for tokens until their respective Eof has been reached. At that point, the lexer is popped off the stack and the next lexer's tokens are produced. An Eof is returned once all lexers have been drained.",null,null],[3,"BufferedLexer","","A buffered lexer that allows tokens to be peeked at before they are actually consumed.",null,null],[8,"Reader","","A trait that can supply a peekable stream of characters.",null,null],[10,"peek","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[10,"consume","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"clear","","",7,{"inputs":[{"name":"self"}],"output":null}],[10,"to_string","","",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"Lexer","","A trait that can supply a stream of tokens.",null,null],[10,"next_token","","",8,{"inputs":[{"name":"self"}],"output":{"name":"diagresult"}}],[11,"new","","",9,{"inputs":[{"name":"box"}],"output":{"name":"accumulatingreader"}}],[11,"refill","","Grow and fill the internal buffer such that at least min_len characters are present, or the end of the file has been reached. This function may shift the buffer contents around, in which case previous buffer indices become invalid. Recalculate all indices derived from `base`, `pos`, or `tail` after a call to this function.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"slice","","Return a slice of the consumed bytes.",9,null],[11,"rem_slice","","Return a slice of the remaining bytes, starting at the last call to clear().",9,null],[11,"peek","","Return the value of the byte that is `off` bytes away from the current position in the input file. If the `off` lies beyond the end of file, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"consume","","Consume the next `amt` bytes of the input. All consumed bytes since the last `clear()` can be accessed via `slice()` or `to_string()`.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Clear the consumed bytes.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"to_string","","Convert the consumed bytes to a String.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","",10,{"inputs":[{"name":"str"}],"output":{"name":"stringreader"}}],[11,"peek","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"consume","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"to_string","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","",11,{"inputs":[{"name":"t"}],"output":{"name":"stackedlexer"}}],[11,"push","","",11,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"next_token","","",11,{"inputs":[{"name":"self"}],"output":{"name":"diagresult"}}],[11,"new","","Create a new buffered lexer.",12,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"bufferedlexer"}}],[11,"peek","","Peek at a token not yet consumed. This function merely returns a reference to said token. Use `pop()` to advance the lexer.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"diagresult"}}],[11,"push","","Insert a token in front of the stream such that it becomes the next token to be returned from `peek(0)` or `pop()`.",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Consume and return the current token. This is the same token that would be returned by `peek(0)`.",12,{"inputs":[{"name":"self"}],"output":{"name":"diagresult"}}],[11,"inner","","",12,{"inputs":[{"name":"self"}],"output":{"name":"lexer"}}],[11,"inner_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"lexer"}}],[0,"name","moore_common","A name table that internalizes all names presented to it and allows for them to be referred to by a lightweight tag. This structure is heavily inspired by the interner used in the Rust compiler.",null,null],[3,"Name","moore_common::name","A name is a lightweight 32 bit tag that refers to a string in a name table. During parsing, encountered strings are inserted into the name table and only the corresponding tag is kept in the token. Names which have their most significant bit set represent case sensitive names, such as for extended identifiers.",null,null],[12,"0","","",13,null],[3,"RcStr","","A reference-counted string that acts like a regular str slice, hiding the fact that it is wrapped in Rc<>.",null,null],[3,"NameTable","","A lookup table of names. Internalizes strings either in a case sensitive or case insensitive way. Allows for bidirectional lookup, i.e. by string or by assigned name.",null,null],[5,"get_name_table","","Get this thread's current name table.",null,{"inputs":[],"output":{"name":"rc"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"is_case_sensitive","","Check if the name is case sensitive.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","Return the string representation of this name.",13,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"new","","Create a new ref-counted string which is a copy of `value`.",14,{"inputs":[{"name":"str"}],"output":{"name":"rcstr"}}],[11,"from","","Create a new ref-counted string that contains `value`, without allocating any new storage.",14,{"inputs":[{"name":"string"}],"output":{"name":"rcstr"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"rcstr"}],"output":{"name":"ordering"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Create a new empty name table.",15,{"inputs":[],"output":{"name":"nametable"}}],[11,"intern","","Obtain a name for a string. This either inserts the string into the table and returns the new name, or returns the existing name if the string already exists in the table.",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"name":"name"}}],[11,"get","","Retrieve the string given a name tag.",15,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"rcstr"}}],[11,"find","","Try to find a string.",15,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[0,"source","moore_common","A global source file table that assigns an opaque ID to each processed source file. This helps keeping the source location lean and allow for simple querying of information.",null,null],[3,"Source","moore_common::source","",null,null],[12,"0","","",16,null],[3,"SourceManager","","A manager for source files and their assigned IDs.",null,null],[3,"Location","","A single location within a source file, expressed as a byte offset.",null,null],[12,"source","","",17,null],[12,"offset","","",17,null],[3,"Span","","A span of locations within a source file, expressed as a half-open interval of bytes `[begin,end)`.",null,null],[12,"source","","",18,null],[12,"begin","","",18,null],[12,"end","","",18,null],[3,"Spanned","","A wrapper that associates a span with a value.",null,null],[12,"value","","",19,null],[12,"span","","",19,null],[5,"get_source_manager","","Get the global source manager.",null,{"inputs":[],"output":{"name":"rc"}}],[6,"CharIter","","An iterator that yields the characters from an input file together with the byte positions within the stream.",null,null],[17,"INVALID_SOURCE","","",null,null],[17,"INVALID_LOCATION","","",null,null],[17,"INVALID_SPAN","","",null,null],[8,"SourceFile","","",null,null],[10,"get_id","","",20,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[10,"get_path","","",20,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[10,"get_content","","Obtain the content of this source file. The returned object may be used to iterate over the characters in the file or extract portions of it.",20,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"extract","","Copy a range of the source content into a String instance owned by the caller, possibly converting the encoding such that the result is in UTF-8.",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[8,"SourceContent","","",null,null],[10,"iter","","Obtain an iterator over the characters within the source file, together with their respective byte positions.",21,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[10,"iter_from","","Obtain an iterator over the characters within the source file, starting at the provided location `offset`, together with their respective byte positions.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"box"}}],[10,"extract","","Copy a range of the source content into a String instance owned by the caller, possibly converting the encoding such that the result is in UTF-8.",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[10,"extract_iter","","Obtain an iterator over an extract of the source content. This might be more efficient than copying the extract into a String.",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"box"}}],[10,"bytes","","Obtain a slice voer all bytes within the source file. This is the fastest way of getting at the file's contents, since no parsing or character encoding is performed or assumed.",21,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"ordering"}}],[11,"hash","","",16,null],[11,"get_path","","Return the path of this source file.",16,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"get_content","","Access the contents of this source file.",16,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"extract","","Copy a range of the source content into a String instance owned by the caller, possibly converting the encoding such that the result is in UTF-8.",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"with","","Obtain the source file for a given source ID.",22,{"inputs":[{"name":"self"},{"name":"source"},{"name":"f"}],"output":{"name":"r"}}],[11,"find","","",22,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"open","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"add","","Create a virtual file from the contents of a string and add it to the source manager. Future calls to `open()` with the given filename will yield the provided contents.",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"source"}}],[11,"add_anonymous","","Create a virtual file from the contents of a string and add it to the source manager. The file can only be used with the returned `Source`, since there is no name associated with it by which it could be referred to.",22,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"source"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"ordering"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","Create a new location.",17,{"inputs":[{"name":"source"},{"name":"usize"}],"output":{"name":"location"}}],[11,"iter","","Obtain an iterator into the source file at this location.",17,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"box"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",17,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","Create a new span from two byte offsets.",18,{"inputs":[{"name":"source"},{"name":"usize"},{"name":"usize"}],"output":{"name":"span"}}],[11,"union","","Create a new span that covers two spans, i.e. represents the smallest possible span that fully contains both input spans `a` and `b`.",18,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"span"}}],[11,"expand","","Modify this range to also cover the entirety of the `other` range. The `other` range must lie in the same source as `self`.",18,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"begin","","Return the location just before the first character in this span.",18,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"end","","Return the location just after the last character in this span.",18,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"extract","","Copy the portion of the source file in this span into an owned string.",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"iter","","Obtain an iterator over the extract of the source file describe by this span.",18,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"box"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"ordering"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Wrap a given value together with the span it covers.",19,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"spanned"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"grind","moore_common","This module provides an abstraction similar to iterators. Elements are produced in one direction, while errors bubble backwards until they are vented. This allows for complex transformation chains such as lexical analyzers and parsers to be constructed, where errors, warnings, or notices might be emitted without disturbing the transformation.",null,null],[3,"Peekable","moore_common::grind","",null,null],[3,"Lookahead","","",null,null],[3,"Filter","","",null,null],[3,"Vent","","",null,null],[3,"MapErrGrinder","","",null,null],[3,"Read","","",null,null],[3,"Iter","","",null,null],[3,"Unwrap","","",null,null],[5,"from_read","","",null,{"inputs":[{"name":"t"}],"output":{"name":"read"}}],[5,"from_iter","","",null,{"inputs":[{"name":"i"}],"output":{"name":"iter"}}],[0,"utf8","","A UTF8 parser that keeps track of the index and size of the characters it emits. This parser does not generate any errors, but rather replaces invalid encoding in the input with the `U+FFFD REPLACEMENT CHARACTER`.",null,null],[3,"Utf8","moore_common::grind::utf8","",null,null],[11,"new","","Create a new UTF8 parser.",23,{"inputs":[{"name":"t"}],"output":{"name":"utf8"}}],[11,"next","","",23,null],[11,"emit","","",23,null],[11,"new","moore_common::grind","",24,{"inputs":[{"name":"t"}],"output":{"name":"peekable"}}],[11,"peek","","",24,null],[11,"emit","","",24,null],[11,"next","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"peekable"}}],[11,"new","","",25,{"inputs":[{"name":"t"}],"output":{"name":"lookahead"}}],[11,"lookahead","","",25,null],[11,"undo","","",25,null],[11,"emit","","",25,null],[11,"next","","",25,null],[11,"from","","",25,{"inputs":[{"name":"t"}],"output":{"name":"lookahead"}}],[11,"new","","",26,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"filter"}}],[11,"emit","","",26,null],[11,"next","","",26,null],[8,"Chisel","","",null,null],[16,"Value","","",27,null],[10,"end","","",27,{"inputs":[],"output":{"name":"self"}}],[10,"is_end","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"value","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"value_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Grinder","","",null,null],[16,"Item","","",28,null],[16,"Error","","",28,null],[10,"next","","",28,null],[10,"emit","","",28,null],[11,"vent","","",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vent"}}],[11,"unwrap","","",28,{"inputs":[{"name":"self"}],"output":{"name":"unwrap"}}],[11,"map_err","","",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperrgrinder"}}],[11,"peekable","","",28,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"lookaheadable","","",28,{"inputs":[{"name":"self"}],"output":{"name":"lookahead"}}],[11,"filter","","",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,null],[11,"emit","","",29,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"next","","",30,null],[11,"emit","","",30,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"next","","",31,null],[11,"emit","","",31,null],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"emit","","",32,null],[11,"emit","","",33,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"next","","",33,null],[11,"new","moore_common","",0,{"inputs":[],"output":{"name":"session"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Session"],[3,"SessionOptions"],[3,"DiagnosticBuilder"],[3,"DiagBuilder2"],[4,"DiagSegment"],[4,"Severity"],[3,"Handler"],[8,"Reader"],[8,"Lexer"],[3,"AccumulatingReader"],[3,"StringReader"],[3,"StackedLexer"],[3,"BufferedLexer"],[3,"Name"],[3,"RcStr"],[3,"NameTable"],[3,"Source"],[3,"Location"],[3,"Span"],[3,"Spanned"],[8,"SourceFile"],[8,"SourceContent"],[3,"SourceManager"],[3,"Utf8"],[3,"Peekable"],[3,"Lookahead"],[3,"Filter"],[8,"Chisel"],[8,"Grinder"],[3,"Vent"],[3,"MapErrGrinder"],[3,"Read"],[3,"Iter"],[3,"Unwrap"]]};
searchIndex["moore_svlog"] = {"doc":"This crate implements SystemVerilog for the moore compiler.","items":[[3,"Name","moore_svlog::hir","A name is a lightweight 32 bit tag that refers to a string in a name table. During parsing, encountered strings are inserted into the name table and only the corresponding tag is kept in the token. Names which have their most significant bit set represent case sensitive names, such as for extended identifiers.",null,null],[12,"0","","",0,null],[3,"Span","","A span of locations within a source file, expressed as a half-open interval of bytes `[begin,end)`.",null,null],[12,"source","","",1,null],[12,"begin","","",1,null],[12,"end","","",1,null],[3,"NodeId","","A positive, small ID assigned to each node in the AST. Used as a lightweight way to refer to individual nodes, e.g. during symbol table construction and name resolution.",null,null],[3,"Root","","The root of the HIR tree. This represents one elaborated design.",null,null],[12,"top","","",2,null],[12,"mods","","",2,null],[12,"intfs","","",2,null],[12,"pkgs","","",2,null],[5,"lower","","",null,{"inputs":[{"name":"session"},{"name":"hashmap"},{"name":"nodeid"},{"name":"vec"}],"output":{"name":"result"}}],[3,"Port","","",null,null],[12,"name","","",3,null],[12,"span","","",3,null],[12,"slices","","",3,null],[3,"GenerateBlock","","",null,null],[12,"span","","",4,null],[12,"label","","",4,null],[12,"body","","",4,null],[3,"PortSlice","","A port slice refers to a port declaration within the module. It consists of the name of the declaration and a list of optional member and index accesses that select individual parts of the declaration.",null,null],[12,"id","","",5,null],[12,"name","","",5,null],[12,"span","","",5,null],[12,"selects","","",5,null],[12,"dir","","",5,null],[12,"kind","","",5,null],[12,"ty","","",5,null],[12,"dims","","",5,null],[3,"NodeIndex","","An search index of all nodes in a HIR tree.",null,null],[12,"hir","","",6,null],[12,"nodes","","",6,null],[3,"Module","","A module.",null,null],[12,"id","","",7,null],[12,"name","","",7,null],[12,"span","","",7,null],[12,"lifetime","","",7,null],[12,"ports","","",7,null],[12,"params","","",7,null],[12,"body","","",7,null],[3,"GenerateFor","","",null,null],[12,"span","","",8,null],[12,"init","","",8,null],[12,"cond","","",8,null],[12,"step","","",8,null],[12,"block","","",8,null],[3,"PortDecl","","",null,null],[12,"dir","","",9,null],[3,"Package","","A package.",null,null],[12,"name","","",10,null],[12,"span","","",10,null],[12,"lifetime","","",10,null],[12,"body","","",10,null],[3,"Expr","","",null,null],[5,"is_type_empty","","Check if a type is empty, i.e. it is an implicit type with no sign or packed dimensions specified.",null,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[4,"PortSelect","","",null,null],[13,"Member","","",11,null],[13,"Index","","",11,null],[3,"Interface","","An interface.",null,null],[12,"id","","",12,null],[12,"name","","",12,null],[12,"span","","",12,null],[12,"lifetime","","",12,null],[12,"ports","","",12,null],[12,"params","","",12,null],[12,"body","","",12,null],[3,"GenerateIf","","",null,null],[12,"span","","",13,null],[12,"cond","","",13,null],[12,"main_block","","",13,null],[12,"else_block","","",13,null],[3,"HierarchyBody","","A hierarchy body represents the contents of a module, interface, or package. Generate regions and nested modules introduce additional bodies. The point of hierarchy bodies is to take a level of the design hierarchy and group all declarations by type, rather than having them in a single array in declaration order.",null,null],[12,"procs","","",14,null],[12,"nets","","",14,null],[12,"vars","","",14,null],[12,"assigns","","",14,null],[12,"params","","",14,null],[12,"insts","","",14,null],[12,"genreg","","",14,null],[12,"genvars","","",14,null],[12,"genfors","","",14,null],[12,"genifs","","",14,null],[12,"gencases","","",14,null],[12,"classes","","",14,null],[12,"subroutines","","",14,null],[12,"asserts","","",14,null],[12,"typedefs","","",14,null],[4,"Node","","",null,null],[13,"Module","","",15,null],[13,"Interface","","",15,null],[13,"Package","","",15,null],[13,"Port","","",15,null],[13,"PortSlice","","",15,null],[13,"TypeParam","","",15,null],[13,"ValueParam","","",15,null],[13,"VarDecl","","",15,null],[11,"is_case_sensitive","","Check if the name is case sensitive.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","Return the string representation of this name.",0,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ordering"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new span from two byte offsets.",1,{"inputs":[{"name":"source"},{"name":"usize"},{"name":"usize"}],"output":{"name":"span"}}],[11,"union","","Create a new span that covers two spans, i.e. represents the smallest possible span that fully contains both input spans `a` and `b`.",1,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"span"}}],[11,"expand","","Modify this range to also cover the entirety of the `other` range. The `other` range must lie in the same source as `self`.",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"span"}}],[11,"begin","","Return the location just before the first character in this span.",1,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"end","","Return the location just after the last character in this span.",1,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"extract","","Copy the portion of the source file in this span into an owned string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"iter","","Obtain an iterator over the extract of the source file describe by this span.",1,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"box"}}],[11,"new","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"from_u32","","",16,{"inputs":[{"name":"u32"}],"output":{"name":"nodeid"}}],[11,"as_usize","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}]],"paths":[[3,"Name"],[3,"Span"],[3,"Root"],[3,"Port"],[3,"GenerateBlock"],[3,"PortSlice"],[3,"NodeIndex"],[3,"Module"],[3,"GenerateFor"],[3,"PortDecl"],[3,"Package"],[4,"PortSelect"],[3,"Interface"],[3,"GenerateIf"],[3,"HierarchyBody"],[4,"Node"],[3,"NodeId"],[3,"Expr"]]};
searchIndex["moore_svlog_hir"] = {"doc":"The high-level intermediate representation for SystemVerilog. After name resolution, the AST is lowered into this representation, eliminating a lot of the syntactic sugar represented in the AST, and resolving default and implicit values.","items":[[3,"Name","moore_svlog_hir","A name is a lightweight 32 bit tag that refers to a string in a name table. During parsing, encountered strings are inserted into the name table and only the corresponding tag is kept in the token. Names which have their most significant bit set represent case sensitive names, such as for extended identifiers.",null,null],[12,"0","","",0,null],[3,"Span","","A span of locations within a source file, expressed as a half-open interval of bytes `[begin,end)`.",null,null],[12,"source","","",1,null],[12,"begin","","",1,null],[12,"end","","",1,null],[3,"NodeId","","A positive, small ID assigned to each node in the AST. Used as a lightweight way to refer to individual nodes, e.g. during symbol table construction and name resolution.",null,null],[3,"Root","","The root of the HIR tree. This represents one elaborated design.",null,null],[12,"top","","",2,null],[12,"mods","","",2,null],[12,"intfs","","",2,null],[12,"pkgs","","",2,null],[3,"NodeIndex","","An search index of all nodes in a HIR tree.",null,null],[12,"hir","","",3,null],[12,"nodes","","",3,null],[3,"Module","","A module.",null,null],[12,"id","","",4,null],[12,"name","","",4,null],[12,"span","","",4,null],[12,"lifetime","","",4,null],[12,"ports","","",4,null],[12,"params","","",4,null],[12,"body","","",4,null],[3,"Interface","","An interface.",null,null],[12,"id","","",5,null],[12,"name","","",5,null],[12,"span","","",5,null],[12,"lifetime","","",5,null],[12,"ports","","",5,null],[12,"params","","",5,null],[12,"body","","",5,null],[3,"Package","","A package.",null,null],[12,"name","","",6,null],[12,"span","","",6,null],[12,"lifetime","","",6,null],[12,"body","","",6,null],[3,"HierarchyBody","","A hierarchy body represents the contents of a module, interface, or package. Generate regions and nested modules introduce additional bodies. The point of hierarchy bodies is to take a level of the design hierarchy and group all declarations by type, rather than having them in a single array in declaration order.",null,null],[12,"procs","","",7,null],[12,"nets","","",7,null],[12,"vars","","",7,null],[12,"assigns","","",7,null],[12,"params","","",7,null],[12,"insts","","",7,null],[12,"genreg","","",7,null],[12,"genvars","","",7,null],[12,"genfors","","",7,null],[12,"genifs","","",7,null],[12,"gencases","","",7,null],[12,"classes","","",7,null],[12,"subroutines","","",7,null],[12,"asserts","","",7,null],[12,"typedefs","","",7,null],[3,"Port","","",null,null],[12,"name","","",8,null],[12,"span","","",8,null],[12,"slices","","",8,null],[3,"PortSlice","","A port slice refers to a port declaration within the module. It consists of the name of the declaration and a list of optional member and index accesses that select individual parts of the declaration.",null,null],[12,"id","","",9,null],[12,"name","","",9,null],[12,"span","","",9,null],[12,"selects","","",9,null],[12,"dir","","",9,null],[12,"kind","","",9,null],[12,"ty","","",9,null],[12,"dims","","",9,null],[3,"PortDecl","","",null,null],[12,"dir","","",10,null],[3,"Expr","","",null,null],[3,"GenerateBlock","","",null,null],[12,"span","","",11,null],[12,"label","","",11,null],[12,"body","","",11,null],[3,"GenerateFor","","",null,null],[12,"span","","",12,null],[12,"init","","",12,null],[12,"cond","","",12,null],[12,"step","","",12,null],[12,"block","","",12,null],[3,"GenerateIf","","",null,null],[12,"span","","",13,null],[12,"cond","","",13,null],[12,"main_block","","",13,null],[12,"else_block","","",13,null],[4,"Node","","",null,null],[13,"Module","","",14,null],[13,"Interface","","",14,null],[13,"Package","","",14,null],[13,"Port","","",14,null],[13,"PortSlice","","",14,null],[13,"TypeParam","","",14,null],[13,"ValueParam","","",14,null],[13,"VarDecl","","",14,null],[4,"PortSelect","","",null,null],[13,"Member","","",15,null],[13,"Index","","",15,null],[5,"lower","","",null,{"inputs":[{"name":"session"},{"name":"nameresolution"},{"name":"nodeid"},{"name":"vec"}],"output":{"name":"result"}}],[5,"is_type_empty","","Check if a type is empty, i.e. it is an implicit type with no sign or packed dimensions specified.",null,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_case_sensitive","","Check if the name is case sensitive.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","Return the string representation of this name.",0,{"inputs":[{"name":"self"}],"output":{"name":"rcstr"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ordering"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new span from two byte offsets.",1,{"inputs":[{"name":"source"},{"name":"usize"},{"name":"usize"}],"output":{"name":"span"}}],[11,"union","","Create a new span that covers two spans, i.e. represents the smallest possible span that fully contains both input spans `a` and `b`.",1,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"span"}}],[11,"expand","","Modify this range to also cover the entirety of the `other` range. The `other` range must lie in the same source as `self`.",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"span"}}],[11,"begin","","Return the location just before the first character in this span.",1,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"end","","Return the location just after the last character in this span.",1,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"extract","","Copy the portion of the source file in this span into an owned string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"iter","","Obtain an iterator over the extract of the source file describe by this span.",1,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"box"}}],[11,"new","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"from_u32","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"nodeid"}}],[11,"as_usize","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}]],"paths":[[3,"Name"],[3,"Span"],[3,"Root"],[3,"NodeIndex"],[3,"Module"],[3,"Interface"],[3,"Package"],[3,"HierarchyBody"],[3,"Port"],[3,"PortSlice"],[3,"PortDecl"],[3,"GenerateBlock"],[3,"GenerateFor"],[3,"GenerateIf"],[4,"Node"],[4,"PortSelect"],[3,"Expr"],[3,"NodeId"]]};
searchIndex["moore_svlog_syntax"] = {"doc":"This crate implements parsing SystemVerilog source files into an abstract syntax tree and resolving the encountered names.","items":[[0,"ast","moore_svlog_syntax","",null,null],[3,"NodeId","moore_svlog_syntax::ast","A positive, small ID assigned to each node in the AST. Used as a lightweight way to refer to individual nodes, e.g. during symbol table construction and name resolution.",null,null],[3,"Root","","",null,null],[12,"timeunits","","",0,null],[12,"items","","",0,null],[3,"ModDecl","","",null,null],[12,"id","","",1,null],[12,"span","","",1,null],[12,"lifetime","","",1,null],[12,"name","","",1,null],[12,"name_span","","",1,null],[12,"params","","",1,null],[12,"ports","","",1,null],[12,"items","","",1,null],[3,"IntfDecl","","",null,null],[12,"id","","",2,null],[12,"span","","",2,null],[12,"lifetime","","",2,null],[12,"name","","",2,null],[12,"name_span","","",2,null],[12,"params","","",2,null],[12,"ports","","",2,null],[12,"items","","",2,null],[3,"PackageDecl","","",null,null],[12,"id","","",3,null],[12,"span","","",3,null],[12,"lifetime","","",3,null],[12,"name","","",3,null],[12,"name_span","","",3,null],[12,"timeunits","","",3,null],[12,"items","","",3,null],[3,"Timeunit","","",null,null],[3,"Type","","",null,null],[12,"span","","",4,null],[12,"data","","",4,null],[12,"sign","","",4,null],[12,"dims","","",4,null],[3,"EnumName","","",null,null],[12,"span","","",5,null],[12,"name","","",5,null],[12,"range","","",5,null],[12,"value","","",5,null],[3,"StructMember","","",null,null],[12,"span","","",6,null],[12,"rand_qualifier","","",6,null],[12,"ty","","",6,null],[12,"names","","",6,null],[3,"PortDecl","","",null,null],[12,"span","","",7,null],[12,"dir","","",7,null],[12,"net_type","","",7,null],[12,"var","","",7,null],[12,"ty","","",7,null],[12,"names","","",7,null],[3,"Procedure","","",null,null],[12,"span","","",8,null],[12,"kind","","",8,null],[12,"stmt","","",8,null],[3,"Stmt","","",null,null],[12,"span","","",9,null],[12,"label","","",9,null],[12,"data","","",9,null],[3,"DelayControl","","",null,null],[12,"span","","",10,null],[12,"expr","","",10,null],[3,"EventControl","","",null,null],[12,"span","","",11,null],[12,"data","","",11,null],[3,"CycleDelay","","",null,null],[3,"VarDecl","","",null,null],[12,"span","","",12,null],[12,"konst","","",12,null],[12,"var","","",12,null],[12,"lifetime","","",12,null],[12,"ty","","",12,null],[12,"names","","",12,null],[3,"VarDeclName","","",null,null],[12,"id","","",13,null],[12,"span","","",13,null],[12,"name","","",13,null],[12,"name_span","","",13,null],[12,"dims","","",13,null],[12,"init","","",13,null],[3,"GenvarDecl","","",null,null],[12,"id","","",14,null],[12,"span","","",14,null],[12,"name","","",14,null],[12,"name_span","","",14,null],[12,"init","","",14,null],[3,"Expr","","",null,null],[12,"span","","",15,null],[12,"data","","",15,null],[3,"Identifier","","",null,null],[12,"id","","",16,null],[12,"span","","",16,null],[12,"name","","",16,null],[3,"CallArg","","",null,null],[12,"span","","",17,null],[12,"name_span","","",17,null],[12,"name","","",17,null],[12,"expr","","",17,null],[3,"StreamExpr","","",null,null],[12,"expr","","",18,null],[12,"range","","",18,null],[3,"ClassDecl","","",null,null],[12,"span","","",19,null],[12,"virt","","",19,null],[12,"lifetime","","",19,null],[12,"name","","",19,null],[12,"params","","",19,null],[12,"extends","","",19,null],[12,"items","","",19,null],[3,"ClassItem","","",null,null],[12,"span","","",20,null],[12,"qualifiers","","",20,null],[12,"data","","",20,null],[3,"Typedef","","",null,null],[12,"span","","",21,null],[12,"name","","",21,null],[12,"ty","","",21,null],[12,"dims","","",21,null],[3,"Constraint","","",null,null],[12,"span","","",22,null],[12,"kind","","",22,null],[12,"statik","","",22,null],[12,"name","","",22,null],[12,"name_span","","",22,null],[12,"items","","",22,null],[3,"ConstraintItem","","",null,null],[12,"span","","",23,null],[12,"data","","",23,null],[3,"SubroutineDecl","","",null,null],[12,"span","","",24,null],[12,"prototype","","",24,null],[12,"items","","",24,null],[3,"SubroutinePrototype","","",null,null],[12,"span","","",25,null],[12,"kind","","",25,null],[12,"name","","",25,null],[12,"args","","",25,null],[3,"SubroutinePort","","",null,null],[12,"span","","",26,null],[12,"dir","","",26,null],[12,"var","","",26,null],[12,"ty","","",26,null],[12,"name","","",26,null],[3,"SubroutinePortName","","",null,null],[12,"name","","",27,null],[12,"dims","","",27,null],[12,"expr","","",27,null],[3,"SubroutinePortDecl","","",null,null],[12,"span","","",28,null],[12,"dir","","",28,null],[12,"var","","",28,null],[12,"ty","","",28,null],[12,"names","","",28,null],[3,"NetDecl","","",null,null],[12,"span","","",29,null],[12,"net_type","","",29,null],[12,"strength","","",29,null],[12,"kind","","",29,null],[12,"ty","","",29,null],[12,"delay","","",29,null],[12,"names","","",29,null],[3,"PatternField","","",null,null],[12,"span","","",30,null],[12,"data","","",30,null],[3,"ImportDecl","","",null,null],[12,"span","","",31,null],[12,"items","","",31,null],[3,"ImportItem","","",null,null],[12,"pkg","","",32,null],[12,"name","","",32,null],[3,"Assertion","","",null,null],[12,"span","","",33,null],[12,"label","","",33,null],[12,"data","","",33,null],[3,"SeqExpr","","",null,null],[12,"span","","",34,null],[12,"data","","",34,null],[3,"PropSpec","","",null,null],[3,"PropExpr","","",null,null],[12,"span","","",35,null],[12,"data","","",35,null],[3,"Inst","","",null,null],[12,"span","","",36,null],[12,"target","","The name of the module to instantiate.",36,null],[12,"params","","The parameters in the module to be assigned.",36,null],[12,"names","","The names and ports of the module instantiations.",36,null],[3,"InstName","","",null,null],[12,"span","","",37,null],[12,"name","","",37,null],[12,"dims","","",37,null],[12,"conns","","",37,null],[3,"ModportDecl","","",null,null],[12,"span","","",38,null],[12,"items","","",38,null],[3,"ModportItem","","",null,null],[12,"span","","",39,null],[12,"name","","",39,null],[12,"ports","","",39,null],[3,"ParamDecl","","A parameter or localparam declaration.",null,null],[12,"span","","",40,null],[12,"local","","",40,null],[12,"kind","","",40,null],[3,"ParamTypeDecl","","A single type assignment within a parameter or localparam declaration.",null,null],[12,"span","","",41,null],[12,"name","","",41,null],[12,"ty","","",41,null],[3,"ParamValueDecl","","A single value assignment within a parameter or loclparam declaration.",null,null],[12,"span","","",42,null],[12,"ty","","",42,null],[12,"name","","",42,null],[12,"dims","","",42,null],[12,"expr","","",42,null],[3,"ContAssign","","A continuous assignment statement.",null,null],[12,"span","","",43,null],[12,"strength","","",43,null],[12,"delay","","",43,null],[12,"delay_control","","",43,null],[12,"assignments","","",43,null],[3,"GenerateFor","","",null,null],[12,"span","","",44,null],[12,"init","","",44,null],[12,"cond","","",44,null],[12,"step","","",44,null],[12,"block","","",44,null],[3,"GenerateIf","","",null,null],[12,"span","","",45,null],[12,"cond","","",45,null],[12,"main_block","","",45,null],[12,"else_block","","",45,null],[3,"GenerateCase","","",null,null],[3,"GenerateBlock","","A body of a generate construct. May contains hierarchy items or more generate constructs.",null,null],[12,"span","","",46,null],[12,"label","","",46,null],[12,"items","","",46,null],[3,"ParamAssignment","","",null,null],[12,"span","","",47,null],[12,"name","","",47,null],[12,"expr","","",47,null],[3,"PortConn","","A port connection as given in an instantiation.",null,null],[12,"span","","",48,null],[12,"kind","","",48,null],[4,"Item","","",null,null],[13,"Module","","",49,null],[13,"Interface","","",49,null],[13,"Package","","",49,null],[13,"Class","","",49,null],[13,"Item","","",49,null],[4,"Lifetime","","Lifetime specifier for variables, tasks, and functions. Defaults to static.",null,null],[13,"Static","","",50,null],[13,"Automatic","","",50,null],[4,"HierarchyItem","","",null,null],[13,"Dummy","","",51,null],[13,"ImportDecl","","",51,null],[13,"LocalparamDecl","","",51,null],[13,"ParameterDecl","","",51,null],[13,"ParamDecl","","",51,null],[13,"ModportDecl","","",51,null],[13,"ClassDecl","","",51,null],[13,"Typedef","","",51,null],[13,"PortDecl","","",51,null],[13,"Procedure","","",51,null],[13,"SubroutineDecl","","",51,null],[13,"ContAssign","","",51,null],[13,"GenvarDecl","","",51,null],[13,"GenerateRegion","","",51,null],[13,"GenerateFor","","",51,null],[13,"GenerateIf","","",51,null],[13,"GenerateCase","","",51,null],[13,"Assertion","","",51,null],[13,"NetDecl","","",51,null],[13,"VarDecl","","",51,null],[13,"Inst","","",51,null],[4,"TypeData","","",null,null],[13,"ImplicitType","","",52,null],[13,"VoidType","","",52,null],[13,"NamedType","","",52,null],[13,"StringType","","",52,null],[13,"ChandleType","","",52,null],[13,"VirtIntfType","","",52,null],[13,"EventType","","",52,null],[13,"MailboxType","","",52,null],[13,"ScopedType","","",52,null],[12,"ty","moore_svlog_syntax::ast::TypeData","",52,null],[12,"member","","",52,null],[12,"name","","",52,null],[13,"BitType","moore_svlog_syntax::ast","",52,null],[13,"LogicType","","",52,null],[13,"RegType","","",52,null],[13,"ByteType","","",52,null],[13,"ShortIntType","","",52,null],[13,"IntType","","",52,null],[13,"LongIntType","","",52,null],[13,"TimeType","","",52,null],[13,"ShortRealType","","",52,null],[13,"RealType","","",52,null],[13,"RealtimeType","","",52,null],[13,"EnumType","","",52,null],[13,"StructType","","",52,null],[12,"kind","moore_svlog_syntax::ast::TypeData","",52,null],[12,"packed","","",52,null],[12,"signing","","",52,null],[12,"members","","",52,null],[13,"SpecializedType","moore_svlog_syntax::ast","",52,null],[4,"TypeSign","","",null,null],[13,"None","","",53,null],[13,"Signed","","",53,null],[13,"Unsigned","","",53,null],[4,"TypeDim","","",null,null],[13,"Expr","","",54,null],[13,"Range","","",54,null],[13,"Queue","","",54,null],[13,"Unsized","","",54,null],[13,"Associative","","",54,null],[4,"StructKind","","",null,null],[13,"Struct","","",55,null],[13,"Union","","",55,null],[13,"TaggedUnion","","",55,null],[4,"Port","","",null,null],[13,"Intf","","",56,null],[12,"span","moore_svlog_syntax::ast::Port","",56,null],[12,"modport","","",56,null],[12,"name","","",56,null],[12,"dims","","",56,null],[12,"expr","","",56,null],[13,"Explicit","moore_svlog_syntax::ast","",56,null],[12,"span","moore_svlog_syntax::ast::Port","",56,null],[12,"dir","","",56,null],[12,"name","","",56,null],[12,"expr","","",56,null],[13,"Named","moore_svlog_syntax::ast","",56,null],[12,"span","moore_svlog_syntax::ast::Port","",56,null],[12,"dir","","",56,null],[12,"kind","","",56,null],[12,"ty","","",56,null],[12,"name","","",56,null],[12,"dims","","",56,null],[12,"expr","","",56,null],[13,"Implicit","moore_svlog_syntax::ast","",56,null],[4,"PortKind","","",null,null],[13,"Net","","",57,null],[13,"Var","","",57,null],[4,"PortDir","","",null,null],[13,"Input","","",58,null],[13,"Output","","",58,null],[13,"Inout","","",58,null],[13,"Ref","","",58,null],[4,"NetType","","",null,null],[13,"Supply0","","",59,null],[13,"Supply1","","",59,null],[13,"Tri","","",59,null],[13,"TriAnd","","",59,null],[13,"TriOr","","",59,null],[13,"TriReg","","",59,null],[13,"Tri0","","",59,null],[13,"Tri1","","",59,null],[13,"Uwire","","",59,null],[13,"Wire","","",59,null],[13,"WireAnd","","",59,null],[13,"WireOr","","",59,null],[4,"ProcedureKind","","",null,null],[13,"Initial","","",60,null],[13,"Always","","",60,null],[13,"AlwaysComb","","",60,null],[13,"AlwaysLatch","","",60,null],[13,"AlwaysFf","","",60,null],[13,"Final","","",60,null],[4,"StmtData","","",null,null],[13,"NullStmt","","",61,null],[13,"SequentialBlock","","",61,null],[13,"ParallelBlock","","",61,null],[13,"IfStmt","","",61,null],[12,"up","moore_svlog_syntax::ast::StmtData","",61,null],[12,"cond","","",61,null],[12,"main_stmt","","",61,null],[12,"else_stmt","","",61,null],[13,"BlockingAssignStmt","moore_svlog_syntax::ast","",61,null],[12,"lhs","moore_svlog_syntax::ast::StmtData","",61,null],[12,"rhs","","",61,null],[12,"op","","",61,null],[13,"NonblockingAssignStmt","moore_svlog_syntax::ast","",61,null],[12,"lhs","moore_svlog_syntax::ast::StmtData","",61,null],[12,"rhs","","",61,null],[12,"delay","","",61,null],[12,"event","","",61,null],[13,"TimedStmt","moore_svlog_syntax::ast","",61,null],[13,"CaseStmt","","",61,null],[12,"up","moore_svlog_syntax::ast::StmtData","",61,null],[12,"kind","","",61,null],[12,"expr","","",61,null],[12,"mode","","",61,null],[12,"items","","",61,null],[13,"ForeverStmt","moore_svlog_syntax::ast","",61,null],[13,"RepeatStmt","","",61,null],[13,"WhileStmt","","",61,null],[13,"DoStmt","","",61,null],[13,"ForStmt","","",61,null],[13,"ForeachStmt","","",61,null],[13,"ExprStmt","","",61,null],[13,"VarDeclStmt","","",61,null],[13,"GenvarDeclStmt","","",61,null],[13,"ContinueStmt","","",61,null],[13,"BreakStmt","","",61,null],[13,"ReturnStmt","","",61,null],[13,"ImportStmt","","",61,null],[13,"AssertionStmt","","",61,null],[13,"WaitExprStmt","","",61,null],[13,"WaitForkStmt","","",61,null],[13,"DisableForkStmt","","",61,null],[13,"DisableStmt","","",61,null],[4,"JoinKind","","",null,null],[13,"All","","",62,null],[13,"Any","","",62,null],[13,"None","","",62,null],[4,"UniquePriority","","",null,null],[13,"Unique","","",63,null],[13,"Unique0","","",63,null],[13,"Priority","","",63,null],[4,"CaseKind","","",null,null],[13,"Normal","","",64,null],[13,"DontCareZ","","",64,null],[13,"DontCareXZ","","",64,null],[4,"CaseMode","","",null,null],[13,"Normal","","",65,null],[13,"Inside","","",65,null],[13,"Pattern","","",65,null],[4,"CaseItem","","",null,null],[13,"Default","","",66,null],[13,"Expr","","",66,null],[4,"EventControlData","","",null,null],[13,"Implicit","","",67,null],[13,"Expr","","",67,null],[4,"TimingControl","","",null,null],[13,"Delay","","",68,null],[13,"Event","","",68,null],[13,"Cycle","","",68,null],[4,"AssignOp","","",null,null],[13,"Identity","","",69,null],[13,"Add","","",69,null],[13,"Sub","","",69,null],[13,"Mul","","",69,null],[13,"Div","","",69,null],[13,"Mod","","",69,null],[13,"BitAnd","","",69,null],[13,"BitOr","","",69,null],[13,"BitXor","","",69,null],[13,"LogicShL","","",69,null],[13,"LogicShR","","",69,null],[13,"ArithShL","","",69,null],[13,"ArithShR","","",69,null],[4,"ExprData","","",null,null],[13,"DummyExpr","","",70,null],[13,"LiteralExpr","","",70,null],[13,"IdentExpr","","",70,null],[13,"SysIdentExpr","","",70,null],[13,"IndexExpr","","",70,null],[12,"indexee","moore_svlog_syntax::ast::ExprData","",70,null],[12,"index","","",70,null],[13,"UnaryExpr","moore_svlog_syntax::ast","",70,null],[12,"op","moore_svlog_syntax::ast::ExprData","",70,null],[12,"expr","","",70,null],[12,"postfix","","",70,null],[13,"BinaryExpr","moore_svlog_syntax::ast","",70,null],[12,"op","moore_svlog_syntax::ast::ExprData","",70,null],[12,"lhs","","",70,null],[12,"rhs","","",70,null],[13,"TernaryExpr","moore_svlog_syntax::ast","",70,null],[12,"cond","moore_svlog_syntax::ast::ExprData","",70,null],[12,"true_expr","","",70,null],[12,"false_expr","","",70,null],[13,"AssignExpr","moore_svlog_syntax::ast","",70,null],[12,"op","moore_svlog_syntax::ast::ExprData","",70,null],[12,"lhs","","",70,null],[12,"rhs","","",70,null],[13,"CallExpr","moore_svlog_syntax::ast","",70,null],[13,"TypeExpr","","",70,null],[13,"ConstructorCallExpr","","",70,null],[13,"ClassNewExpr","","",70,null],[13,"ArrayNewExpr","","",70,null],[13,"EmptyQueueExpr","","",70,null],[13,"StreamConcatExpr","","",70,null],[12,"slice","moore_svlog_syntax::ast::ExprData","",70,null],[12,"exprs","","",70,null],[13,"ConcatExpr","moore_svlog_syntax::ast","",70,null],[12,"repeat","moore_svlog_syntax::ast::ExprData","",70,null],[12,"exprs","","",70,null],[13,"MinTypMaxExpr","moore_svlog_syntax::ast","",70,null],[12,"min","moore_svlog_syntax::ast::ExprData","",70,null],[12,"typ","","",70,null],[12,"max","","",70,null],[13,"RangeExpr","moore_svlog_syntax::ast","",70,null],[12,"mode","moore_svlog_syntax::ast::ExprData","",70,null],[12,"lhs","","",70,null],[12,"rhs","","",70,null],[13,"MemberExpr","moore_svlog_syntax::ast","",70,null],[12,"expr","moore_svlog_syntax::ast::ExprData","",70,null],[12,"name","","",70,null],[13,"PatternExpr","moore_svlog_syntax::ast","",70,null],[4,"TypeOrExpr","","",null,null],[13,"Type","","",71,null],[13,"Expr","","",71,null],[4,"RangeMode","","",null,null],[13,"Absolute","","",72,null],[13,"RelativeDown","","",72,null],[13,"RelativeUp","","",72,null],[4,"StreamConcatSlice","","",null,null],[13,"Expr","","",73,null],[13,"Type","","",73,null],[4,"EventExpr","","",null,null],[13,"Edge","","",74,null],[12,"span","moore_svlog_syntax::ast::EventExpr","",74,null],[12,"edge","","",74,null],[12,"value","","",74,null],[13,"Iff","moore_svlog_syntax::ast","",74,null],[12,"span","moore_svlog_syntax::ast::EventExpr","",74,null],[12,"expr","","",74,null],[12,"cond","","",74,null],[13,"Or","moore_svlog_syntax::ast","",74,null],[12,"span","moore_svlog_syntax::ast::EventExpr","",74,null],[12,"lhs","","",74,null],[12,"rhs","","",74,null],[4,"EdgeIdent","moore_svlog_syntax::ast","",null,null],[13,"Implicit","","",75,null],[13,"Edge","","",75,null],[13,"Posedge","","",75,null],[13,"Negedge","","",75,null],[4,"ClassItemQualifier","","",null,null],[13,"Static","","",76,null],[13,"Protected","","",76,null],[13,"Local","","",76,null],[13,"Rand","","",76,null],[13,"Randc","","",76,null],[13,"Pure","","",76,null],[13,"Virtual","","",76,null],[13,"Const","","",76,null],[4,"ClassItemData","","",null,null],[13,"Property","","",77,null],[13,"SubroutineDecl","","",77,null],[13,"ExternSubroutine","","",77,null],[13,"Constraint","","",77,null],[13,"ClassDecl","","",77,null],[13,"CovergroupDecl","","",77,null],[13,"LocalparamDecl","","",77,null],[13,"ParameterDecl","","",77,null],[13,"Null","","",77,null],[4,"RandomQualifier","","",null,null],[13,"Rand","","",78,null],[13,"Randc","","",78,null],[4,"ConstraintKind","","",null,null],[13,"Decl","","",79,null],[13,"Proto","","",79,null],[13,"ExternProto","","",79,null],[13,"PureProto","","",79,null],[4,"ConstraintItemData","","",null,null],[13,"If","","",80,null],[13,"Foreach","","",80,null],[13,"Expr","","",80,null],[4,"SubroutineKind","","",null,null],[13,"Func","","",81,null],[13,"Task","","",81,null],[4,"SubroutineItem","","",null,null],[13,"PortDecl","","",82,null],[13,"Stmt","","",82,null],[4,"SubroutinePortDir","","",null,null],[13,"Input","","",83,null],[13,"Output","","",83,null],[13,"Inout","","",83,null],[13,"Ref","","",83,null],[13,"ConstRef","","",83,null],[4,"NetKind","","",null,null],[13,"Vectored","","",84,null],[13,"Scalared","","",84,null],[13,"None","","",84,null],[4,"NetStrength","","",null,null],[13,"Drive","","",85,null],[13,"Charge","","",85,null],[4,"DriveStrength","","",null,null],[13,"Supply0","","",86,null],[13,"Strong0","","",86,null],[13,"Pull0","","",86,null],[13,"Weak0","","",86,null],[13,"HighZ0","","",86,null],[13,"Supply1","","",86,null],[13,"Strong1","","",86,null],[13,"Pull1","","",86,null],[13,"Weak1","","",86,null],[13,"HighZ1","","",86,null],[4,"ChargeStrength","","",null,null],[13,"Small","","",87,null],[13,"Medium","","",87,null],[13,"Large","","",87,null],[4,"PatternFieldData","","",null,null],[13,"Default","","",88,null],[13,"Member","","",88,null],[13,"Type","","",88,null],[13,"Expr","","",88,null],[13,"Repeat","","",88,null],[4,"AssertionData","","",null,null],[13,"Immediate","","",89,null],[13,"Deferred","","",89,null],[13,"Concurrent","","",89,null],[4,"BlockingAssertion","","",null,null],[13,"Assert","","",90,null],[13,"Assume","","",90,null],[13,"Cover","","",90,null],[4,"ConcurrentAssertion","","",null,null],[13,"AssertProperty","","",91,null],[13,"AssumeProperty","","",91,null],[13,"CoverProperty","","",91,null],[13,"CoverSequence","","",91,null],[13,"ExpectProperty","","",91,null],[13,"RestrictProperty","","",91,null],[4,"AssertionActionBlock","","",null,null],[13,"Positive","","",92,null],[13,"Negative","","",92,null],[13,"Both","","",92,null],[4,"SeqExprData","","",null,null],[13,"Expr","","",93,null],[13,"BinOp","","",93,null],[13,"Throughout","","",93,null],[13,"Clocked","","",93,null],[4,"SeqRep","","",null,null],[13,"Consec","","",94,null],[13,"ConsecStar","","",94,null],[13,"ConsecPlus","","",94,null],[13,"Nonconsec","","",94,null],[13,"Goto","","",94,null],[4,"SeqBinOp","","",null,null],[13,"Or","","",95,null],[13,"And","","",95,null],[13,"Intersect","","",95,null],[13,"Within","","",95,null],[4,"PropExprData","","",null,null],[13,"SeqOp","","",96,null],[13,"SeqBinOp","","",96,null],[13,"Not","","",96,null],[13,"BinOp","","",96,null],[13,"Clocked","","",96,null],[4,"PropSeqOp","","",null,null],[13,"None","","",97,null],[13,"Weak","","",97,null],[13,"Strong","","",97,null],[4,"PropSeqBinOp","","",null,null],[13,"ImplOverlap","","",98,null],[13,"ImplNonoverlap","","",98,null],[13,"FollowOverlap","","",98,null],[13,"FollowNonoverlap","","",98,null],[4,"PropBinOp","","",null,null],[13,"Or","","",99,null],[13,"And","","",99,null],[13,"Until","","",99,null],[13,"SUntil","","",99,null],[13,"UntilWith","","",99,null],[13,"SUntilWith","","",99,null],[13,"Impl","","",99,null],[13,"Iff","","",99,null],[13,"SeqImplOl","","",99,null],[13,"SeqImplNol","","",99,null],[13,"SeqFollowOl","","",99,null],[13,"SeqFollowNol","","",99,null],[4,"ModportPort","","",null,null],[13,"Port","","",100,null],[4,"ParamKind","","",null,null],[13,"Type","","",101,null],[13,"Value","","",101,null],[4,"PortConnKind","","",null,null],[13,"Auto","","",102,null],[13,"Named","","",102,null],[13,"Positional","","",102,null],[4,"PortConnMode","","Represents how a named port connection is made.",null,null],[13,"Auto","","",103,null],[13,"Unconnected","","",103,null],[13,"Connected","","",103,null],[17,"DUMMY_NODE_ID","","During parsing and syntax tree construction, we assign each node this ID. Only later, during the renumbering pass do we assign actual IDs to each node.",null,null],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"lt","","",104,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"le","","",104,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"gt","","",104,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ge","","",104,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"cmp","","",104,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ordering"}}],[11,"hash","","",104,null],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",104,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",104,{"inputs":[{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"from_u32","","",104,{"inputs":[{"name":"u32"}],"output":{"name":"nodeid"}}],[11,"as_usize","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"root"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"root"}],"output":{"name":"bool"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"span","","",49,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"as_str","","",49,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"moddecl"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"moddecl"}],"output":{"name":"bool"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"intfdecl"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"intfdecl"}],"output":{"name":"bool"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"packagedecl"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"packagedecl"}],"output":{"name":"bool"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"timeunit"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"timeunit"}}],[11,"encode","","",105,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"hierarchyitem"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"hierarchyitem"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"hierarchyitem"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"span","","",51,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"as_str","","",51,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"typedata"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"typedata"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"typedata"}],"output":{"name":"bool"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"typesign"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"typesign"}],"output":{"name":"bool"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"typedim"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"typedim"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"typedim"}],"output":{"name":"bool"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"enumname"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"enumname"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"enumname"}],"output":{"name":"bool"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"structkind"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"structkind"}],"output":{"name":"bool"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"structmember"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"structmember"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"structmember"}],"output":{"name":"bool"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"port"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"port"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"port"}],"output":{"name":"bool"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"span","","",56,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"portdecl"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"portdecl"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"portdecl"}],"output":{"name":"bool"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"portkind"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"portkind"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"portkind"}],"output":{"name":"bool"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"portdir"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"portdir"}],"output":{"name":"bool"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"nettype"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"nettype"}],"output":{"name":"bool"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"procedure"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"procedure"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"procedure"}],"output":{"name":"bool"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"procedurekind"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"procedurekind"}],"output":{"name":"bool"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stmtdata"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"stmtdata"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"stmtdata"}],"output":{"name":"bool"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new_null","","",9,{"inputs":[{"name":"span"}],"output":{"name":"stmt"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"joinkind"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"joinkind"}],"output":{"name":"bool"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"uniquepriority"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"uniquepriority"}],"output":{"name":"bool"}}],[11,"encode","","",63,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"casekind"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"casekind"}],"output":{"name":"bool"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"casemode"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"casemode"}],"output":{"name":"bool"}}],[11,"encode","","",65,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"caseitem"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"caseitem"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"caseitem"}],"output":{"name":"bool"}}],[11,"encode","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"delaycontrol"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"delaycontrol"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"delaycontrol"}],"output":{"name":"bool"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"eventcontrol"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"eventcontrol"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"eventcontrol"}],"output":{"name":"bool"}}],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"eventcontroldata"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"eventcontroldata"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"eventcontroldata"}],"output":{"name":"bool"}}],[11,"encode","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"cycledelay"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"cycledelay"}],"output":{"name":"bool"}}],[11,"encode","","",106,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"timingcontrol"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"timingcontrol"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"timingcontrol"}],"output":{"name":"bool"}}],[11,"encode","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"assignop"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"assignop"}],"output":{"name":"bool"}}],[11,"encode","","",69,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vardecl"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"vardecl"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"vardecl"}],"output":{"name":"bool"}}],[11,"encode","","",12,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vardeclname"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"vardeclname"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"vardeclname"}],"output":{"name":"bool"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"genvardecl"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"genvardecl"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"genvardecl"}],"output":{"name":"bool"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"exprdata"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"exprdata"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"exprdata"}],"output":{"name":"bool"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"typeorexpr"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"typeorexpr"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"typeorexpr"}],"output":{"name":"bool"}}],[11,"encode","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"rangemode"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"rangemode"}],"output":{"name":"bool"}}],[11,"encode","","",72,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"callarg"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"callarg"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"callarg"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"streamconcatslice"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"streamconcatslice"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"streamconcatslice"}],"output":{"name":"bool"}}],[11,"encode","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"streamexpr"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"streamexpr"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"streamexpr"}],"output":{"name":"bool"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"eventexpr"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"eventexpr"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"eventexpr"}],"output":{"name":"bool"}}],[11,"encode","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"edgeident"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"edgeident"}],"output":{"name":"bool"}}],[11,"encode","","",75,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"span","","",74,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"classdecl"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"classdecl"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"classdecl"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"classitem"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"classitem"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"classitem"}],"output":{"name":"bool"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"classitemqualifier"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"classitemqualifier"}],"output":{"name":"bool"}}],[11,"encode","","",76,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"classitemdata"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"classitemdata"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"classitemdata"}],"output":{"name":"bool"}}],[11,"encode","","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"randomqualifier"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"randomqualifier"}],"output":{"name":"bool"}}],[11,"encode","","",78,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"typedef"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"typedef"}],"output":{"name":"bool"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"constraint"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"constraintkind"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"constraintkind"}],"output":{"name":"bool"}}],[11,"encode","","",79,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"constraintitem"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"constraintitem"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"constraintitem"}],"output":{"name":"bool"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"constraintitemdata"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"constraintitemdata"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"constraintitemdata"}],"output":{"name":"bool"}}],[11,"encode","","",80,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"subroutinedecl"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"subroutinedecl"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"subroutinedecl"}],"output":{"name":"bool"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"subroutineprototype"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"subroutineprototype"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"subroutineprototype"}],"output":{"name":"bool"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"subroutinekind"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"subroutinekind"}],"output":{"name":"bool"}}],[11,"encode","","",81,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"subroutineport"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"subroutineport"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"subroutineport"}],"output":{"name":"bool"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"subroutineportname"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"subroutineportname"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"subroutineportname"}],"output":{"name":"bool"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"subroutineitem"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"subroutineitem"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"subroutineitem"}],"output":{"name":"bool"}}],[11,"encode","","",82,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"subroutineportdecl"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"subroutineportdecl"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"subroutineportdecl"}],"output":{"name":"bool"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"subroutineportdir"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"subroutineportdir"}],"output":{"name":"bool"}}],[11,"encode","","",83,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"netdecl"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"netdecl"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"netdecl"}],"output":{"name":"bool"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"netkind"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"netkind"}],"output":{"name":"bool"}}],[11,"encode","","",84,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"netstrength"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"netstrength"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"netstrength"}],"output":{"name":"bool"}}],[11,"encode","","",85,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"drivestrength"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"drivestrength"}],"output":{"name":"bool"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"chargestrength"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"chargestrength"}],"output":{"name":"bool"}}],[11,"encode","","",87,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"patternfield"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"patternfield"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"patternfield"}],"output":{"name":"bool"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"patternfielddata"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"patternfielddata"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"patternfielddata"}],"output":{"name":"bool"}}],[11,"encode","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"importdecl"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"importdecl"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"importdecl"}],"output":{"name":"bool"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"importitem"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"importitem"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"importitem"}],"output":{"name":"bool"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"assertion"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"assertiondata"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"assertiondata"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"assertiondata"}],"output":{"name":"bool"}}],[11,"encode","","",89,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"blockingassertion"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"blockingassertion"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"blockingassertion"}],"output":{"name":"bool"}}],[11,"encode","","",90,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"concurrentassertion"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"concurrentassertion"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"concurrentassertion"}],"output":{"name":"bool"}}],[11,"encode","","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"assertionactionblock"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"assertionactionblock"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"assertionactionblock"}],"output":{"name":"bool"}}],[11,"encode","","",92,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"seqexpr"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"seqexpr"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"seqexpr"}],"output":{"name":"bool"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"seqexprdata"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"seqexprdata"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"seqexprdata"}],"output":{"name":"bool"}}],[11,"encode","","",93,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"seqrep"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"seqrep"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"seqrep"}],"output":{"name":"bool"}}],[11,"encode","","",94,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"seqbinop"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"seqbinop"}],"output":{"name":"bool"}}],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"propspec"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"propspec"}],"output":{"name":"bool"}}],[11,"encode","","",107,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"propexpr"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"propexpr"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"propexpr"}],"output":{"name":"bool"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"propexprdata"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"propexprdata"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"propexprdata"}],"output":{"name":"bool"}}],[11,"encode","","",96,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"propseqop"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"propseqop"}],"output":{"name":"bool"}}],[11,"encode","","",97,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"propseqbinop"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"propseqbinop"}],"output":{"name":"bool"}}],[11,"encode","","",98,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"propbinop"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"propbinop"}],"output":{"name":"bool"}}],[11,"encode","","",99,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"inst"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"inst"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"inst"}],"output":{"name":"bool"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"instname"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"instname"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"instname"}],"output":{"name":"bool"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"modportdecl"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"modportdecl"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"modportdecl"}],"output":{"name":"bool"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"modportitem"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"modportitem"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"modportitem"}],"output":{"name":"bool"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"modportport"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"modportport"}],"output":{"name":"bool"}}],[11,"encode","","",100,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"paramdecl"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"paramdecl"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"paramdecl"}],"output":{"name":"bool"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"paramkind"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"paramkind"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"paramkind"}],"output":{"name":"bool"}}],[11,"encode","","",101,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"paramtypedecl"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"paramtypedecl"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"paramtypedecl"}],"output":{"name":"bool"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"paramvaluedecl"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"paramvaluedecl"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"paramvaluedecl"}],"output":{"name":"bool"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"contassign"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"contassign"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"contassign"}],"output":{"name":"bool"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"generatefor"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"generatefor"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"generatefor"}],"output":{"name":"bool"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"generateif"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"generateif"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"generateif"}],"output":{"name":"bool"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"generatecase"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"generatecase"}],"output":{"name":"bool"}}],[11,"encode","","",108,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"generateblock"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"generateblock"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"generateblock"}],"output":{"name":"bool"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"paramassignment"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"paramassignment"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"paramassignment"}],"output":{"name":"bool"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"portconn"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"portconn"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"portconn"}],"output":{"name":"bool"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"portconnkind"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"portconnkind"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"portconnkind"}],"output":{"name":"bool"}}],[11,"encode","","",102,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"portconnmode"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"portconnmode"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"portconnmode"}],"output":{"name":"bool"}}],[11,"encode","","",103,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[0,"cat","moore_svlog_syntax","The categorizing lexer. Tokenizes an input stream of characters, yielding a stream of newline, whitespace, comment, symbol, and text tokens.",null,null],[3,"Cat","moore_svlog_syntax::cat","The categorizing lexer. Divides an input stream of characters (unicode) into coarse groups of tokens. These include whitespace, comments, symbols, and text. The strings contained in the emitted tokens can be concatenated to arrive at the original file, i.e. no information is lost.",null,null],[3,"CatToken","","A token emitted by the categorizing lexer.",null,null],[12,"0","","",109,null],[12,"1","","",109,null],[12,"2","","",109,null],[4,"CatTokenKind","","The different kinds of tokens the categorizing lexer can emit.",null,null],[13,"Newline","","",110,null],[13,"Whitespace","","",110,null],[13,"Comment","","",110,null],[13,"Symbol","","",110,null],[13,"Text","","",110,null],[13,"Digits","","",110,null],[13,"Eof","","",110,null],[11,"new","","Create a new categorizing lexer from an `CharIter` iterator.",111,{"inputs":[{"name":"box"}],"output":{"name":"cat"}}],[11,"next","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"cattoken"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"cattoken"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"cattoken"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"cattokenkind"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"cattokenkind"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"cattokenkind"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"lexer","moore_svlog_syntax","A lexical analyzer for SystemVerilog files, based on IEEE 1800-2009, section 5.",null,null],[3,"Lexer","moore_svlog_syntax::lexer","A lexical analyzer for SystemVerilog files.",null,null],[6,"TokenAndSpan","","",null,null],[11,"new","","",112,{"inputs":[{"name":"preprocessor"}],"output":{"name":"lexer"}}],[11,"bump","","",112,{"inputs":[{"name":"self"}],"output":{"name":"diagresult2"}}],[11,"next_token","","",112,{"inputs":[{"name":"self"}],"output":{"name":"diagresult2"}}],[11,"next","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"parser","moore_svlog_syntax","A parser for the SystemVerilog language. Based on IEEE 1800-2009.",null,null],[4,"StreamDir","moore_svlog_syntax::parser","",null,null],[13,"In","","",113,null],[13,"Out","","",113,null],[5,"parse","","",null,{"inputs":[{"name":"lexer"}],"output":{"name":"result"}}],[0,"preproc","moore_svlog_syntax","A preprocessor for SystemVerilog files that takes the raw stream of tokens generated by a lexer and performs include and macro resolution.",null,null],[3,"Preprocessor","moore_svlog_syntax::preproc","",null,null],[11,"new","","Create a new preprocessor for the given source file.",114,null],[11,"next","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"store","moore_svlog_syntax","This module implements the on-disk AST storage. Items can be serialized to disk and deserialized again ata later point.",null,null],[5,"store_items","moore_svlog_syntax::store","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"root"}],"output":{"name":"result"}}],[5,"load_items","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"token","moore_svlog_syntax","Defines all tokens that may result from performing lexical analysis on a SystemVerilog source file. This module is inspired heavily by the tokens used in the Rust compiler.",null,null],[4,"Token","moore_svlog_syntax::token","A primary token emitted by the lexer.",null,null],[13,"Comma","","",115,null],[13,"Period","","",115,null],[13,"Colon","","",115,null],[13,"Semicolon","","",115,null],[13,"At","","",115,null],[13,"Hashtag","","",115,null],[13,"DoubleHashtag","","",115,null],[13,"Namespace","","",115,null],[13,"Ternary","","",115,null],[13,"AddColon","","",115,null],[13,"SubColon","","",115,null],[13,"Apostrophe","","",115,null],[13,"Dollar","","",115,null],[13,"Operator","","",115,null],[13,"OpenDelim","","An opening delimiter",115,null],[13,"CloseDelim","","A closing delimiter",115,null],[13,"Literal","","A literal",115,null],[13,"SysIdent","","A system task or function identifier, e.g. \"$display\"",115,null],[13,"CompDir","","A compiler directive, e.g. \"`timescale\"",115,null],[13,"Ident","","An identifier",115,null],[13,"EscIdent","","An escaped identifier",115,null],[13,"Keyword","","An unsigned number A keyword",115,null],[13,"Eof","","",115,null],[4,"DelimToken","","A delimiter token such as parentheses or brackets.",null,null],[13,"Paren","","A round paranthesis `(` or `)`",116,null],[13,"Brack","","A square bracket `[` or `]`",116,null],[13,"Brace","","A curly brace `{` or `}`",116,null],[13,"Bgend","","A `begin` or `end`",116,null],[4,"Lit","","Abstract literals such as strings.",null,null],[13,"Str","","",117,null],[13,"Decimal","","",117,null],[13,"UnsignedInteger","","An unsigned number.",117,null],[13,"BasedInteger","","",117,null],[13,"UnbasedUnsized","","",117,null],[13,"Real","","",117,null],[13,"Time","","",117,null],[4,"Op","","Operator symbols.",null,null],[13,"Assign","","",118,null],[13,"AssignAdd","","",118,null],[13,"AssignSub","","",118,null],[13,"AssignMul","","",118,null],[13,"AssignDiv","","",118,null],[13,"AssignMod","","",118,null],[13,"AssignBitAnd","","",118,null],[13,"AssignBitOr","","",118,null],[13,"AssignBitXor","","",118,null],[13,"AssignLogicShL","","",118,null],[13,"AssignLogicShR","","",118,null],[13,"AssignArithShL","","",118,null],[13,"AssignArithShR","","",118,null],[13,"Add","","",118,null],[13,"Sub","","",118,null],[13,"Mul","","",118,null],[13,"Div","","",118,null],[13,"Mod","","",118,null],[13,"Pow","","",118,null],[13,"Inc","","",118,null],[13,"Dec","","",118,null],[13,"LogicEq","","",118,null],[13,"LogicNeq","","",118,null],[13,"CaseEq","","",118,null],[13,"CaseNeq","","",118,null],[13,"WildcardEq","","",118,null],[13,"WildcardNeq","","",118,null],[13,"Lt","","",118,null],[13,"Leq","","",118,null],[13,"Gt","","",118,null],[13,"Geq","","",118,null],[13,"LogicNot","","",118,null],[13,"LogicAnd","","",118,null],[13,"LogicOr","","",118,null],[13,"LogicImpl","","",118,null],[13,"LogicEquiv","","",118,null],[13,"BitNot","","",118,null],[13,"BitAnd","","",118,null],[13,"BitNand","","",118,null],[13,"BitOr","","",118,null],[13,"BitNor","","",118,null],[13,"BitXor","","",118,null],[13,"BitXnor","","",118,null],[13,"BitNxor","","",118,null],[13,"LogicShL","","",118,null],[13,"LogicShR","","",118,null],[13,"ArithShL","","",118,null],[13,"ArithShR","","",118,null],[13,"SeqImplOl","","",118,null],[13,"SeqImplNol","","",118,null],[13,"SeqFollowOl","","",118,null],[13,"SeqFollowNol","","",118,null],[4,"Precedence","","Expression precedence. Note that a few kinds of expression are right-associative rather than the default left-associative.",null,null],[13,"Min","","",119,null],[13,"MinTypMax","","",119,null],[13,"Concatenation","","",119,null],[13,"Assignment","","",119,null],[13,"Implication","","",119,null],[13,"Ternary","","",119,null],[13,"LogicOr","","",119,null],[13,"LogicAnd","","",119,null],[13,"BitOr","","",119,null],[13,"BitXor","","",119,null],[13,"BitAnd","","",119,null],[13,"Equality","","",119,null],[13,"Relational","","",119,null],[13,"Shift","","",119,null],[13,"Add","","",119,null],[13,"Mul","","",119,null],[13,"Pow","","",119,null],[13,"Unary","","",119,null],[13,"Postfix","","",119,null],[13,"Scope","","",119,null],[13,"Max","","",119,null],[4,"Kw","","",null,null],[13,"AcceptOn","","",120,null],[13,"Alias","","",120,null],[13,"Always","","",120,null],[13,"AlwaysComb","","",120,null],[13,"AlwaysFf","","",120,null],[13,"AlwaysLatch","","",120,null],[13,"And","","",120,null],[13,"Assert","","",120,null],[13,"Assign","","",120,null],[13,"Assume","","",120,null],[13,"Automatic","","",120,null],[13,"Before","","",120,null],[13,"Begin","","",120,null],[13,"Bind","","",120,null],[13,"Bins","","",120,null],[13,"Binsof","","",120,null],[13,"Bit","","",120,null],[13,"Break","","",120,null],[13,"Buf","","",120,null],[13,"Bufif0","","",120,null],[13,"Bufif1","","",120,null],[13,"Byte","","",120,null],[13,"Case","","",120,null],[13,"Casex","","",120,null],[13,"Casez","","",120,null],[13,"Cell","","",120,null],[13,"Chandle","","",120,null],[13,"Checker","","",120,null],[13,"Class","","",120,null],[13,"Clocking","","",120,null],[13,"Cmos","","",120,null],[13,"Config","","",120,null],[13,"Const","","",120,null],[13,"Constraint","","",120,null],[13,"Context","","",120,null],[13,"Continue","","",120,null],[13,"Cover","","",120,null],[13,"Covergroup","","",120,null],[13,"Coverpoint","","",120,null],[13,"Cross","","",120,null],[13,"Deassign","","",120,null],[13,"Default","","",120,null],[13,"Defparam","","",120,null],[13,"Design","","",120,null],[13,"Disable","","",120,null],[13,"Dist","","",120,null],[13,"Do","","",120,null],[13,"Edge","","",120,null],[13,"Else","","",120,null],[13,"End","","",120,null],[13,"Endcase","","",120,null],[13,"Endchecker","","",120,null],[13,"Endclass","","",120,null],[13,"Endclocking","","",120,null],[13,"Endconfig","","",120,null],[13,"Endfunction","","",120,null],[13,"Endgenerate","","",120,null],[13,"Endgroup","","",120,null],[13,"Endinterface","","",120,null],[13,"Endmodule","","",120,null],[13,"Endpackage","","",120,null],[13,"Endprimitive","","",120,null],[13,"Endprogram","","",120,null],[13,"Endproperty","","",120,null],[13,"Endsequence","","",120,null],[13,"Endspecify","","",120,null],[13,"Endtable","","",120,null],[13,"Endtask","","",120,null],[13,"Enum","","",120,null],[13,"Event","","",120,null],[13,"Eventually","","",120,null],[13,"Expect","","",120,null],[13,"Export","","",120,null],[13,"Extends","","",120,null],[13,"Extern","","",120,null],[13,"Final","","",120,null],[13,"FirstMatch","","",120,null],[13,"For","","",120,null],[13,"Force","","",120,null],[13,"Foreach","","",120,null],[13,"Forever","","",120,null],[13,"Fork","","",120,null],[13,"Forkjoin","","",120,null],[13,"Function","","",120,null],[13,"Generate","","",120,null],[13,"Genvar","","",120,null],[13,"Global","","",120,null],[13,"Highz0","","",120,null],[13,"Highz1","","",120,null],[13,"If","","",120,null],[13,"Iff","","",120,null],[13,"Ifnone","","",120,null],[13,"IgnoreBins","","",120,null],[13,"IllegalBins","","",120,null],[13,"Implies","","",120,null],[13,"Import","","",120,null],[13,"Incdir","","",120,null],[13,"Include","","",120,null],[13,"Initial","","",120,null],[13,"Inout","","",120,null],[13,"Input","","",120,null],[13,"Inside","","",120,null],[13,"Instance","","",120,null],[13,"Int","","",120,null],[13,"Integer","","",120,null],[13,"Interface","","",120,null],[13,"Intersect","","",120,null],[13,"Join","","",120,null],[13,"JoinAny","","",120,null],[13,"JoinNone","","",120,null],[13,"Large","","",120,null],[13,"Let","","",120,null],[13,"Liblist","","",120,null],[13,"Library","","",120,null],[13,"Local","","",120,null],[13,"Localparam","","",120,null],[13,"Logic","","",120,null],[13,"Longint","","",120,null],[13,"Macromodule","","",120,null],[13,"Matches","","",120,null],[13,"Medium","","",120,null],[13,"Modport","","",120,null],[13,"Module","","",120,null],[13,"Nand","","",120,null],[13,"Negedge","","",120,null],[13,"New","","",120,null],[13,"Nexttime","","",120,null],[13,"Nmos","","",120,null],[13,"Nor","","",120,null],[13,"Noshowcancelled","","",120,null],[13,"Not","","",120,null],[13,"Notif0","","",120,null],[13,"Notif1","","",120,null],[13,"Null","","",120,null],[13,"Or","","",120,null],[13,"Output","","",120,null],[13,"Package","","",120,null],[13,"Packed","","",120,null],[13,"Parameter","","",120,null],[13,"Pmos","","",120,null],[13,"Posedge","","",120,null],[13,"Primitive","","",120,null],[13,"Priority","","",120,null],[13,"Program","","",120,null],[13,"Property","","",120,null],[13,"Protected","","",120,null],[13,"Pull0","","",120,null],[13,"Pull1","","",120,null],[13,"Pulldown","","",120,null],[13,"Pullup","","",120,null],[13,"PulsestyleOndetect","","",120,null],[13,"PulsestyleOnevent","","",120,null],[13,"Pure","","",120,null],[13,"Rand","","",120,null],[13,"Randc","","",120,null],[13,"Randcase","","",120,null],[13,"Randsequence","","",120,null],[13,"Rcmos","","",120,null],[13,"Real","","",120,null],[13,"Realtime","","",120,null],[13,"Ref","","",120,null],[13,"Reg","","",120,null],[13,"RejectOn","","",120,null],[13,"Release","","",120,null],[13,"Repeat","","",120,null],[13,"Restrict","","",120,null],[13,"Return","","",120,null],[13,"Rnmos","","",120,null],[13,"Rpmos","","",120,null],[13,"Rtran","","",120,null],[13,"Rtranif0","","",120,null],[13,"Rtranif1","","",120,null],[13,"SAlways","","",120,null],[13,"SEventually","","",120,null],[13,"SNexttime","","",120,null],[13,"SUntil","","",120,null],[13,"SUntilWith","","",120,null],[13,"Scalared","","",120,null],[13,"Sequence","","",120,null],[13,"Shortint","","",120,null],[13,"Shortreal","","",120,null],[13,"Showcancelled","","",120,null],[13,"Signed","","",120,null],[13,"Small","","",120,null],[13,"Solve","","",120,null],[13,"Specify","","",120,null],[13,"Specparam","","",120,null],[13,"Static","","",120,null],[13,"String","","",120,null],[13,"Strong","","",120,null],[13,"Strong0","","",120,null],[13,"Strong1","","",120,null],[13,"Struct","","",120,null],[13,"Super","","",120,null],[13,"Supply0","","",120,null],[13,"Supply1","","",120,null],[13,"SyncAcceptOn","","",120,null],[13,"SyncRejectOn","","",120,null],[13,"Table","","",120,null],[13,"Tagged","","",120,null],[13,"Task","","",120,null],[13,"This","","",120,null],[13,"Throughout","","",120,null],[13,"Time","","",120,null],[13,"Timeprecision","","",120,null],[13,"Timeunit","","",120,null],[13,"Tran","","",120,null],[13,"Tranif0","","",120,null],[13,"Tranif1","","",120,null],[13,"Tri","","",120,null],[13,"Tri0","","",120,null],[13,"Tri1","","",120,null],[13,"Triand","","",120,null],[13,"Trior","","",120,null],[13,"Trireg","","",120,null],[13,"Type","","",120,null],[13,"Typedef","","",120,null],[13,"Union","","",120,null],[13,"Unique","","",120,null],[13,"Unique0","","",120,null],[13,"Unsigned","","",120,null],[13,"Until","","",120,null],[13,"UntilWith","","",120,null],[13,"Untyped","","",120,null],[13,"Use","","",120,null],[13,"Uwire","","",120,null],[13,"Var","","",120,null],[13,"Vectored","","",120,null],[13,"Virtual","","",120,null],[13,"Void","","",120,null],[13,"Wait","","",120,null],[13,"WaitOrder","","",120,null],[13,"Wand","","",120,null],[13,"Weak","","",120,null],[13,"Weak0","","",120,null],[13,"Weak1","","",120,null],[13,"While","","",120,null],[13,"Wildcard","","",120,null],[13,"Wire","","",120,null],[13,"With","","",120,null],[13,"Within","","",120,null],[13,"Wor","","",120,null],[13,"Xnor","","",120,null],[13,"Xor","","",120,null],[5,"find_keyword","","",null,{"inputs":[{"name":"s"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",115,null],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",116,null],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",117,null],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",117,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",117,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"hash","","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",118,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",118,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"as_str","","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_precedence","","",118,{"inputs":[{"name":"self"}],"output":{"name":"precedence"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"precedence"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"precedence"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",119,{"inputs":[{"name":"self"},{"name":"precedence"}],"output":{"name":"option"}}],[11,"cmp","","",119,{"inputs":[{"name":"self"},{"name":"precedence"}],"output":{"name":"ordering"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"kw"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"self"},{"name":"kw"}],"output":{"name":"option"}}],[11,"cmp","","",120,{"inputs":[{"name":"self"},{"name":"kw"}],"output":{"name":"ordering"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"kw"}],"output":{"name":"bool"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",120,null],[11,"as_str","","",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"resolve","moore_svlog_syntax","This module provides name resolution for ASTs. The targeted approach is as follows:",null,null],[3,"Def","moore_svlog_syntax::resolve","",null,null],[12,"span","","",121,null],[12,"id","","",121,null],[4,"DefId","","",null,null],[13,"Error","","",122,null],[13,"Module","","",122,null],[13,"Interface","","",122,null],[13,"Package","","",122,null],[13,"Port","","",122,null],[13,"Var","","",122,null],[13,"Param","","",122,null],[13,"Modport","","",122,null],[13,"Subroutine","","",122,null],[13,"Typedef","","",122,null],[13,"Class","","",122,null],[13,"Inst","","",122,null],[5,"resolve","","",null,null],[6,"NameResolution","","The result of name resolution: An association between every identifier in the AST and a definition it points to.",null,null],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"defid"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",122,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"option"}}],[11,"lt","","",122,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"le","","",122,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"gt","","",122,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"ge","","",122,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"bool"}}],[11,"cmp","","",122,{"inputs":[{"name":"self"},{"name":"defid"}],"output":{"name":"ordering"}}],[11,"is_error","","",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"node_id","","",122,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",121,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"option"}}],[11,"lt","","",121,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"le","","",121,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"gt","","",121,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"ge","","",121,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"cmp","","",121,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"ordering"}}],[0,"renumber","moore_svlog_syntax","This module implements AST node renumbering.",null,null],[5,"renumber","moore_svlog_syntax::renumber","",null,null]],"paths":[[3,"Root"],[3,"ModDecl"],[3,"IntfDecl"],[3,"PackageDecl"],[3,"Type"],[3,"EnumName"],[3,"StructMember"],[3,"PortDecl"],[3,"Procedure"],[3,"Stmt"],[3,"DelayControl"],[3,"EventControl"],[3,"VarDecl"],[3,"VarDeclName"],[3,"GenvarDecl"],[3,"Expr"],[3,"Identifier"],[3,"CallArg"],[3,"StreamExpr"],[3,"ClassDecl"],[3,"ClassItem"],[3,"Typedef"],[3,"Constraint"],[3,"ConstraintItem"],[3,"SubroutineDecl"],[3,"SubroutinePrototype"],[3,"SubroutinePort"],[3,"SubroutinePortName"],[3,"SubroutinePortDecl"],[3,"NetDecl"],[3,"PatternField"],[3,"ImportDecl"],[3,"ImportItem"],[3,"Assertion"],[3,"SeqExpr"],[3,"PropExpr"],[3,"Inst"],[3,"InstName"],[3,"ModportDecl"],[3,"ModportItem"],[3,"ParamDecl"],[3,"ParamTypeDecl"],[3,"ParamValueDecl"],[3,"ContAssign"],[3,"GenerateFor"],[3,"GenerateIf"],[3,"GenerateBlock"],[3,"ParamAssignment"],[3,"PortConn"],[4,"Item"],[4,"Lifetime"],[4,"HierarchyItem"],[4,"TypeData"],[4,"TypeSign"],[4,"TypeDim"],[4,"StructKind"],[4,"Port"],[4,"PortKind"],[4,"PortDir"],[4,"NetType"],[4,"ProcedureKind"],[4,"StmtData"],[4,"JoinKind"],[4,"UniquePriority"],[4,"CaseKind"],[4,"CaseMode"],[4,"CaseItem"],[4,"EventControlData"],[4,"TimingControl"],[4,"AssignOp"],[4,"ExprData"],[4,"TypeOrExpr"],[4,"RangeMode"],[4,"StreamConcatSlice"],[4,"EventExpr"],[4,"EdgeIdent"],[4,"ClassItemQualifier"],[4,"ClassItemData"],[4,"RandomQualifier"],[4,"ConstraintKind"],[4,"ConstraintItemData"],[4,"SubroutineKind"],[4,"SubroutineItem"],[4,"SubroutinePortDir"],[4,"NetKind"],[4,"NetStrength"],[4,"DriveStrength"],[4,"ChargeStrength"],[4,"PatternFieldData"],[4,"AssertionData"],[4,"BlockingAssertion"],[4,"ConcurrentAssertion"],[4,"AssertionActionBlock"],[4,"SeqExprData"],[4,"SeqRep"],[4,"SeqBinOp"],[4,"PropExprData"],[4,"PropSeqOp"],[4,"PropSeqBinOp"],[4,"PropBinOp"],[4,"ModportPort"],[4,"ParamKind"],[4,"PortConnKind"],[4,"PortConnMode"],[3,"NodeId"],[3,"Timeunit"],[3,"CycleDelay"],[3,"PropSpec"],[3,"GenerateCase"],[3,"CatToken"],[4,"CatTokenKind"],[3,"Cat"],[3,"Lexer"],[4,"StreamDir"],[3,"Preprocessor"],[4,"Token"],[4,"DelimToken"],[4,"Lit"],[4,"Op"],[4,"Precedence"],[4,"Kw"],[3,"Def"],[4,"DefId"]]};
searchIndex["moore_vhdl"] = {"doc":"This crate implements VHDL for the moore compiler.","items":[[0,"syntax","moore_vhdl","A lexical analyzer and parser for VHDL source files as per IEEE 1076-2008.",null,null],[5,"parse","moore_vhdl::syntax","",null,{"inputs":[{"name":"source"}],"output":{"name":"result"}}],[0,"lexer","","A VHDL lexer. This module implements lexical analysis of VHDL source files. It converts a stream of input bytes into a stream of language tokens such as identifiers, literals, and symbols.",null,null],[3,"Lexer","moore_vhdl::syntax::lexer","A VHDL lexer. Converts a stream of bytes to VHDL tokens. Emits errors backwards up the pipeline.",null,null],[0,"categorizer","","",null,null],[3,"Categorizer","moore_vhdl::syntax::lexer::categorizer","A grinder that categorizes characters into different groups as per the VHDL language standard.",null,null],[4,"Category","","A character category. Special means the special characters as defined by the VHDL standard to be meaningful syntactically.",null,null],[13,"Letter","","",0,null],[13,"Digit","","",0,null],[13,"Special","","",0,null],[13,"Space","","",0,null],[13,"Other","","",0,null],[11,"new","","Create a new categorizer.",1,{"inputs":[{"name":"t"}],"output":{"name":"categorizer"}}],[11,"emit","","",1,null],[11,"next","","",1,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bundler","moore_vhdl::syntax::lexer","",null,null],[3,"Bundler","moore_vhdl::syntax::lexer::bundler","A grinder that bundles up categorized characters into groups and converts spaces and comments into single tokens, dropping any information about their content. String and bit string literals are formed here as well.",null,null],[4,"Bundle","","A bundle of characters. These are the most fundamental groups of characters as per the VHDL standard. Lexical analysis will aggregate one or more of these into more meaningful tokens.",null,null],[13,"Letters","","",2,null],[13,"Digits","","",2,null],[13,"Special","","",2,null],[13,"StringLiteral","","",2,null],[13,"BitLiteral","","",2,null],[13,"ExtendedIdent","","",2,null],[13,"Space","","",2,null],[13,"Comment","","",2,null],[11,"new","","Create a new bundler.",3,{"inputs":[{"name":"i"},{"name":"source"}],"output":{"name":"bundler"}}],[11,"emit","","",3,null],[11,"next","","",3,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bundle"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bundle"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bundle"}],"output":{"name":"bool"}}],[11,"is_significant","","Check whether the bundle has syntactic significance, i.e. is not a comment or space.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"tokenizer","moore_vhdl::syntax::lexer","",null,null],[3,"Tokenizer","moore_vhdl::syntax::lexer::tokenizer","A grinder that combines character bundles into lexical tokens. This is the last stage of lexical analysis.",null,null],[11,"new","","Create a new bundler.",4,{"inputs":[{"name":"i"}],"output":{"name":"tokenizer"}}],[11,"emit","","",4,null],[11,"next","","",4,null],[0,"token","moore_vhdl::syntax::lexer","",null,null],[3,"Exponent","moore_vhdl::syntax::lexer::token","",null,null],[12,"0","","Sign",5,null],[12,"1","","Value",5,null],[4,"Token","","A primary token as emitted by the lexer.",null,null],[13,"Ident","","A basic or extended identifier.",6,null],[13,"Lit","","A literal.",6,null],[13,"OpenDelim","","An opening delimiter.",6,null],[13,"CloseDelim","","A closing delimiter.",6,null],[13,"Keyword","","A keyword.",6,null],[13,"Period","","",6,null],[13,"Comma","","",6,null],[13,"Colon","","",6,null],[13,"Semicolon","","",6,null],[13,"Apostrophe","","",6,null],[13,"Ampersand","","",6,null],[13,"Arrow","","",6,null],[13,"Condition","","",6,null],[13,"LtGt","","",6,null],[13,"VarAssign","","",6,null],[13,"Lshift","","",6,null],[13,"Rshift","","",6,null],[13,"Eq","","",6,null],[13,"Neq","","",6,null],[13,"Lt","","",6,null],[13,"Leq","","",6,null],[13,"Gt","","",6,null],[13,"Geq","","",6,null],[13,"MatchEq","","",6,null],[13,"MatchNeq","","",6,null],[13,"MatchLt","","",6,null],[13,"MatchLeq","","",6,null],[13,"MatchGt","","",6,null],[13,"MatchGeq","","",6,null],[13,"Add","","",6,null],[13,"Sub","","",6,null],[13,"Mul","","",6,null],[13,"Div","","",6,null],[13,"Pow","","",6,null],[13,"Pipe","","",6,null],[13,"Qmark","","",6,null],[13,"Eof","","The end of the input file.",6,null],[4,"Literal","","",null,null],[13,"Abstract","","",7,null],[13,"BitString","","",7,null],[13,"Char","","",7,null],[13,"String","","",7,null],[4,"DelimToken","","",null,null],[13,"Paren","","",8,null],[13,"Brack","","",8,null],[4,"ExponentSign","","",null,null],[13,"Positive","","",9,null],[13,"Negative","","",9,null],[4,"BitStringBase","","",null,null],[13,"B","","",10,null],[13,"O","","",10,null],[13,"X","","",10,null],[13,"D","","",10,null],[13,"UB","","",10,null],[13,"UO","","",10,null],[13,"UX","","",10,null],[13,"SB","","",10,null],[13,"SO","","",10,null],[13,"SX","","",10,null],[4,"Kw","","",null,null],[13,"Abs","","",11,null],[13,"Access","","",11,null],[13,"After","","",11,null],[13,"Alias","","",11,null],[13,"All","","",11,null],[13,"And","","",11,null],[13,"Architecture","","",11,null],[13,"Array","","",11,null],[13,"Assert","","",11,null],[13,"Assume","","",11,null],[13,"AssumeGuarantee","","",11,null],[13,"Attribute","","",11,null],[13,"Begin","","",11,null],[13,"Block","","",11,null],[13,"Body","","",11,null],[13,"Buffer","","",11,null],[13,"Bus","","",11,null],[13,"Case","","",11,null],[13,"Component","","",11,null],[13,"Configuration","","",11,null],[13,"Constant","","",11,null],[13,"Context","","",11,null],[13,"Cover","","",11,null],[13,"Default","","",11,null],[13,"Disconnect","","",11,null],[13,"Downto","","",11,null],[13,"Else","","",11,null],[13,"Elsif","","",11,null],[13,"End","","",11,null],[13,"Entity","","",11,null],[13,"Exit","","",11,null],[13,"Fairness","","",11,null],[13,"File","","",11,null],[13,"For","","",11,null],[13,"Force","","",11,null],[13,"Function","","",11,null],[13,"Generate","","",11,null],[13,"Generic","","",11,null],[13,"Group","","",11,null],[13,"Guarded","","",11,null],[13,"If","","",11,null],[13,"Impure","","",11,null],[13,"In","","",11,null],[13,"Inertial","","",11,null],[13,"Inout","","",11,null],[13,"Is","","",11,null],[13,"Label","","",11,null],[13,"Library","","",11,null],[13,"Linkage","","",11,null],[13,"Literal","","",11,null],[13,"Loop","","",11,null],[13,"Map","","",11,null],[13,"Mod","","",11,null],[13,"Nand","","",11,null],[13,"New","","",11,null],[13,"Next","","",11,null],[13,"Nor","","",11,null],[13,"Not","","",11,null],[13,"Null","","",11,null],[13,"Of","","",11,null],[13,"On","","",11,null],[13,"Open","","",11,null],[13,"Or","","",11,null],[13,"Others","","",11,null],[13,"Out","","",11,null],[13,"Package","","",11,null],[13,"Parameter","","",11,null],[13,"Port","","",11,null],[13,"Postponed","","",11,null],[13,"Procedure","","",11,null],[13,"Process","","",11,null],[13,"Property","","",11,null],[13,"Protected","","",11,null],[13,"Pure","","",11,null],[13,"Range","","",11,null],[13,"Record","","",11,null],[13,"Register","","",11,null],[13,"Reject","","",11,null],[13,"Release","","",11,null],[13,"Rem","","",11,null],[13,"Report","","",11,null],[13,"Restrict","","",11,null],[13,"RestrictGuarantee","","",11,null],[13,"Return","","",11,null],[13,"Rol","","",11,null],[13,"Ror","","",11,null],[13,"Select","","",11,null],[13,"Sequence","","",11,null],[13,"Severity","","",11,null],[13,"Shared","","",11,null],[13,"Signal","","",11,null],[13,"Sla","","",11,null],[13,"Sll","","",11,null],[13,"Sra","","",11,null],[13,"Srl","","",11,null],[13,"Strong","","",11,null],[13,"Subtype","","",11,null],[13,"Then","","",11,null],[13,"To","","",11,null],[13,"Transport","","",11,null],[13,"Type","","",11,null],[13,"Unaffected","","",11,null],[13,"Units","","",11,null],[13,"Until","","",11,null],[13,"Use","","",11,null],[13,"Variable","","",11,null],[13,"Vmode","","",11,null],[13,"Vprop","","",11,null],[13,"Vunit","","",11,null],[13,"Wait","","",11,null],[13,"When","","",11,null],[13,"While","","",11,null],[13,"With","","",11,null],[13,"Xnor","","",11,null],[13,"Xor","","",11,null],[5,"find_keyword","","",null,{"inputs":[{"name":"s"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_ident","","Checks if this token is a identifier.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"as_str","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"exponent"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"exponent"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"exponent"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"exponentsign"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"exponentsign"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bitstringbase"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"bitstringbase"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"kw"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"kw"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"kw"}],"output":{"name":"ordering"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"kw"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"as_str","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","moore_vhdl::syntax::lexer","Create a new lexer.",12,{"inputs":[{"name":"t"},{"name":"source"}],"output":{"name":"lexer"}}],[11,"next","","",12,null],[11,"emit","","",12,null],[0,"parser","moore_vhdl::syntax","A VHDL parser.",null,null],[0,"token_stream","moore_vhdl::syntax::parser","",null,null],[8,"TokenStream","moore_vhdl::syntax::parser::token_stream","A generalized stream of tokens that accepts emission of diagnostics and tracking of the severity of issues encountered.",null,null],[10,"peek","","Look ahead at a token in the stream.",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"spanned"}}],[10,"bump","","Consume the current token.",13,{"inputs":[{"name":"self"}],"output":null}],[11,"skip","","Skip the current token. Usually the same as `bump`, but may be used to keep skipped tokens out of the consumed tokens count by some parsers.",13,{"inputs":[{"name":"self"}],"output":null}],[10,"consumed","","Get the number of tokens consumed. Excludes tokens skipped with `skip`.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"last_span","","Get the span of the last token consumed token (bumped or skipped).",13,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"last_loc","","Get the tail location of the last consumed token (bumped or skipped).",13,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[10,"emit","","Emit a diagnostic.",13,{"inputs":[{"name":"self"},{"name":"diagbuilder2"}],"output":null}],[10,"severity","","Get the severity of the worst diagnostic emitted so far.",13,{"inputs":[{"name":"self"}],"output":{"name":"severity"}}],[11,"is_fatal","","Check whether a fatal diagnostic has been emitted.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_error","","Check whether an error diagnostic has been emitted.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"rules","moore_vhdl::syntax::parser","This module implements a first stage recursive descent parser for VHDL. It can process a stream of input tokens into the coarse, generalized abstract syntax tree defined in [`ast`]. The grammar productions/rules outlined in the VHDL standard are collapsed into more general rules as outlined in the following table.",null,null],[3,"Recovered","moore_vhdl::syntax::parser::rules","",null,null],[3,"Reported","","",null,null],[4,"ExprPrec","","The precedence of an expression.",null,null],[13,"Inertial","","",14,null],[13,"Condition","","",14,null],[13,"Logical","","",14,null],[13,"Relational","","",14,null],[13,"Shift","","",14,null],[13,"Range","","",14,null],[13,"Add","","",14,null],[13,"Sign","","",14,null],[13,"Mul","","",14,null],[13,"Pow","","",14,null],[13,"Unary","","",14,null],[13,"Primary","","",14,null],[5,"parse_design_file","","Parse an entire design file. IEEE 1076-2008 section 13.1.",null,{"inputs":[{"name":"p"}],"output":{"name":"vec"}}],[5,"parse_design_unit","","Parse a single design unit. IEEE 1076-2008 section 13.1.",null,{"inputs":[{"name":"p"}],"output":{"name":"recoveredresult"}}],[5,"try_context_item","","Parse a context item. IEEE 1076-2008 section 13.4.",null,{"inputs":[{"name":"p"}],"output":{"name":"recoveredresult"}}],[5,"parse_library_clause","","Parse a library clause. IEEE 1076-2008 section 13.2.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_use_clause","","Parse a use clause. IEEE 1076-2008 section 12.4.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_context_ref","","",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_name","","Parse a name. IEEE 1076-2008 section 8.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"try_name","","Try to parse a name. IEEE 1076-2008 section 8.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"try_primary_name","","Try to parse a primary name. IEEE 1076-2008 section 8.",null,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[5,"parse_name_suffix","","Parse the suffix to a name. IEEE 1076-2008 section 8.",null,{"inputs":[{"name":"p"},{"name":"compoundname"}],"output":{"name":"reportedresult"}}],[5,"parse_context_decl","","Parse a context declaration. IEEE 1076-2008 section 13.3.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_entity_decl","","Parse an entity declaration. See IEEE 1076-2008 section 3.2.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_config_decl","","Parse a configuration declaration. See IEEE 1076-2008 section 3.4.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_arch_body","","Parse an architecture body. See IEEE 1076-2008 section 3.3.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"try_generic_clause","","Try to parse a generic clause. See IEEE 1076-2008 section 6.5.6.2.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"try_port_clause","","Try to parse a port clause. See IEEE 1076-2008 section 6.5.6.3.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_intf_decl","","Parse an interface declaration. These are generally part of an interface list as they appear in generic and port clauses within for example entity declarations. See IEEE 1076-2008 section 6.5.1.",null,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"reportedresult"}}],[5,"try_decl_item","","Try to parse a declarative item. See IEEE 1076-2008 section 3.2.3.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_subprog_decl_item","","Parse a subprogram declarative item, which is either a subprogram declaration, body, or instantiation. See IEEE 1076-2008 section 4.2.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_subtype_ind","","Parse a subtype indication. See IEEE 1076-2008 section 6.3.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_paren_expr","","Try to parse a parenthesized expression. This is a combination of a variety of rules from the VHDL grammar. Most notably, it combines the following:",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_expr","","",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_primary_expr","","",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"try_name_or_qualified_primary_expr","","",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_expr_prec","","Parse an expression with a precedence higher than `prec`.",null,{"inputs":[{"name":"p"},{"name":"exprprec"}],"output":{"name":"reportedresult"}}],[5,"parse_expr_suffix","","Parse an expression suffix. Given an already parsed expression and its precedence, try to parse additional tokens that extend the already parsed expression. This is currently limited to binary operations.",null,{"inputs":[{"name":"p"},{"name":"expr"},{"name":"exprprec"}],"output":{"name":"reportedresult"}}],[5,"parse_package_decl","","Parse a package declaration. See IEEE 1076-2008 section 4.7.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_package_body","","Parse a package body. See IEEE 1076-2008 section 4.8.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_package_inst","","Parse a package instantiation declaration. See IEEE 1076-2008 section 4.9.",null,{"inputs":[{"name":"p"},{"name":"bool"}],"output":{"name":"reportedresult"}}],[5,"try_map_aspect","","Try to parse a generic or port map aspect. See IEEE 1076-2008 sections 6.5.7.2 and 6.5.7.3.",null,{"inputs":[{"name":"p"},{"name":"kw"}],"output":{"name":"reportedresult"}}],[5,"parse_type_decl","","Parse a type declaration. See IEEE 1076-2008 section 6.2.",null,{"inputs":[{"name":"p"},{"name":"bool"}],"output":{"name":"reportedresult"}}],[5,"parse_subtype_decl","","Parse a subtype declaration. See IEEE 1076-2008 section 6.3.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_alias_decl","","Parse an alias declaration. See IEEE 1076-2008 section 6.6.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_signature","","",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_object_decl","","Parse a constant, signal, variable, or file declaration. See IEEE 1076-2008 section 6.4.2.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_subprog_spec","","Parse a subprogram specification. This covers the initial part of a subprogram declaration, body, instantiation, or interface declaration. See IEEE 1076-2008 sections 4.2 and 6.5.4. Note that not all combinations of keywords and qualifiers that this parser accepts are actually valid.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_component_decl","","Parse a component declaration. See IEEE 1076-2008 section 6.8.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_discon_spec","","Parse a disconnection specification. See IEEE 1076-2008 section 7.4.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_vunit_binding_ind","","",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_block_comp_decl_item","","Parse a block or component configuration declarative item.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_block_comp_config","","Parse a block or component configuration. See IEEE 1076-2008 sections 3.4.2 and 3.4.3.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_binding_ind","","Parse a binding indication. See IEEE 1076-2008 section 7.3.2.1. The trailing semicolon is required only if at least one of the aspect has been parsed.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_block_comp_spec","","Parse a block or component specification. See IEEE 1067-2008 section 7.3.1.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_config_spec","","Parse a configuration specification. See IEEE 1076-2008 section 7.3.1.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_attr_decl","","Parse an attribute declaration or specification. See IEEE 1076-2008 sections 6.7 and 7.2.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_entity_class","","Parse an entity class. See IEEE 1076-2008 section 7.2.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_group_decl","","Parse a group declaration or group template declaration. See IEEE 1076-2008 sections 6.9 and 6.10.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_stmt","","Parse a sequential or concurrent statement.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"try_label","","Parse an optional label, which basically is just an identifier followed by a colon. This is interesting for statement parsing. See IEEE 1076-2008 section 10.",null,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[5,"parse_wait_stmt","","Parse a wait statement. See IEEE 1076-2008 section 10.2.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_assert_stmt","","Parse an assertion statement. See IEEE 1076-2008 section 10.3.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_report_stmt","","Parse a report statement. See IEEE 1076-2008 section 10.4.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_if_stmt","","Parse an if statement. See IEEE 1076-2008 section 10.8.",null,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"reportedresult"}}],[5,"parse_case_stmt","","Parse a case statement. See IEEE 1076-2008 section 10.9.",null,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"reportedresult"}}],[5,"parse_loop_stmt","","Parse a loop statement. See IEEE 1076-2008 section 10.10.",null,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"reportedresult"}}],[5,"parse_nexit_stmt","","Parse a next or exit statement. See IEEE 1076-2008 sections 10.11 and 10.12.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_return_stmt","","Parse a return statement. See IEEE 1076-2008 section 10.13.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_null_stmt","","Parse a null statement. See IEEE 1076-2008 section 10.14.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_if_generate_stmt","","Parse a generate if statement. See IEEE 1076-2008 section 11.8.",null,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"reportedresult"}}],[5,"parse_case_generate_stmt","","Parse a generate case statement. See IEEE 1076-2008 section 11.8.",null,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"reportedresult"}}],[5,"parse_for_generate_stmt","","Parse a generate for statement. See IEEE 1076-2008 section 11.8.",null,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"reportedresult"}}],[5,"parse_generate_body","","Parse a generate body. See IEEE 1076-2008 section 11.8.",null,{"inputs":[{"name":"p"},{"name":"option"},{"name":"t"}],"output":{"name":"reportedresult"}}],[5,"parse_block_stmt","","Parse a block statement. See IEEE 1076-2008 section 11.2.",null,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"reportedresult"}}],[5,"parse_proc_stmt","","Parse a process statement. See IEEE 1076-2008 section 11.3.",null,{"inputs":[{"name":"p"},{"name":"option"}],"output":{"name":"reportedresult"}}],[5,"parse_assign_tail","","Parse the tail of an assign statement. This function assumes that the name of the signal to be assigned has already been parsed. See IEEE 1076-2008 section 10.5.",null,{"inputs":[{"name":"p"},{"name":"assigntarget"}],"output":{"name":"reportedresult"}}],[5,"parse_select_assign","","Parse a select assign statement. See IEEE 1076-2008 section 10.5.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_assign_dst_tail","","",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"try_force_mode","","",null,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[5,"try_delay_mech","","Try to parse a delay mechanism.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_cond_waves","","Parse a list of conditional waveforms. See IEEE 1076-2008 section 10.5.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_selected_waves","","Parse a list of selected waveforms. See IEEE 1076-2008 section 10.5.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_wave","","Parse a waveform. See IEEE 1076-2008 section 10.5.",null,{"inputs":[{"name":"p"}],"output":{"name":"reportedresult"}}],[5,"parse_inst_or_call_tail","","Parse the tail of an instantiation or procedure call statement. See IEEE 1076-2008 sections 10.7, 11.4, and 11.7.",null,{"inputs":[{"name":"p"},{"name":"option"},{"name":"compoundname"}],"output":{"name":"reportedresult"}}],[6,"RecoveredResult","","",null,null],[6,"ReportedResult","","",null,null],[8,"Parser","","",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"recovered"}],"output":{"name":"reported"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"exprprec"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"exprprec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"exprprec"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"exprprec"}],"output":{"name":"ordering"}}],[0,"basic","moore_vhdl::syntax::parser","This module implements a basic parser that accepts tokens from the VHDL lexer and emits errors back to it.",null,null],[3,"BasicParser","moore_vhdl::syntax::parser::basic","",null,null],[11,"peek","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"spanned"}}],[11,"bump","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"consumed","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last_span","","",17,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"emit","","",17,{"inputs":[{"name":"self"},{"name":"diagbuilder2"}],"output":null}],[11,"severity","","",17,{"inputs":[{"name":"self"}],"output":{"name":"severity"}}],[11,"new","","Create a new parser which consumes input from the given lexer.",17,{"inputs":[{"name":"lexer"}],"output":{"name":"basicparser"}}],[0,"ast","moore_vhdl::syntax","This module implements an abstract syntax tree for VHDL. It is emitted by the parser.",null,null],[3,"NodeId","moore_vhdl::syntax::ast","A positive, small ID assigned to each node in the AST. Used as a lightweight way to refer to individual nodes, e.g. during symbol table construction and name resolution.",null,null],[3,"DesignUnit","","A design unit. Multiple design units make up a design file. Each unit consists of an optional context clause followed by a primary or secondary unit.",null,null],[12,"ctx","","",18,null],[12,"data","","",18,null],[3,"Ident","","An identifier. Has a node ID such that it may be referenced later on.",null,null],[12,"id","","",19,null],[12,"span","","",19,null],[12,"name","","",19,null],[3,"CompoundName","","A compound name consisting of a primary name (identifier, character literal, or string literal), and zero or more suffices (select, attribute, call). The names in IEEE 1076-2008 section 8.1 map to this as follows:",null,null],[12,"id","","",20,null],[12,"span","","",20,null],[12,"primary","","",20,null],[12,"parts","","",20,null],[3,"PrimaryName","","",null,null],[12,"id","","",21,null],[12,"span","","",21,null],[12,"kind","","",21,null],[3,"CtxDecl","","A context declaration.",null,null],[12,"id","","",22,null],[12,"span","","",22,null],[12,"name","","",22,null],[12,"items","","",22,null],[3,"EntityDecl","","An entity declaration.",null,null],[12,"id","","",23,null],[12,"span","","",23,null],[12,"name","","",23,null],[12,"decls","","",23,null],[12,"stmts","","",23,null],[3,"CfgDecl","","A configuration declaration.",null,null],[12,"id","","",24,null],[12,"span","","",24,null],[12,"name","","",24,null],[12,"target","","",24,null],[12,"decls","","",24,null],[3,"ArchBody","","An architecture body.",null,null],[12,"id","","",25,null],[12,"span","","",25,null],[12,"name","","",25,null],[12,"target","","",25,null],[12,"decls","","",25,null],[12,"stmts","","",25,null],[3,"PkgDecl","","A package declaration.",null,null],[12,"id","","",26,null],[12,"span","","",26,null],[12,"name","","",26,null],[12,"decls","","",26,null],[3,"PkgBody","","A package body.",null,null],[12,"id","","",27,null],[12,"span","","",27,null],[12,"name","","",27,null],[12,"decls","","",27,null],[3,"PkgInst","","A package instantiation declaration.",null,null],[12,"id","","",28,null],[12,"span","","",28,null],[12,"name","","",28,null],[12,"target","","",28,null],[12,"generics","","",28,null],[3,"IntfObjDecl","","An interface object declaration.",null,null],[12,"kind","","",29,null],[12,"span","","",29,null],[12,"names","","",29,null],[12,"mode","","",29,null],[12,"ty","","",29,null],[12,"bus","","",29,null],[12,"default","","",29,null],[3,"Subprog","","",null,null],[12,"span","","",30,null],[12,"spec","","",30,null],[12,"data","","",30,null],[3,"SubprogSpec","","",null,null],[12,"span","","",31,null],[12,"name","","",31,null],[12,"kind","","",31,null],[12,"purity","","",31,null],[12,"generic_claus","","",31,null],[12,"generic_map","","",31,null],[12,"params","","",31,null],[12,"retty","","",31,null],[3,"SubtypeInd","","",null,null],[12,"span","","",32,null],[12,"res","","",32,null],[12,"name","","",32,null],[3,"SubtypeDecl","","",null,null],[12,"id","","",33,null],[12,"span","","",33,null],[12,"name","","",33,null],[12,"subtype","","",33,null],[3,"AliasDecl","","An alias declaration.",null,null],[12,"span","","",34,null],[12,"name","","",34,null],[12,"subtype","","",34,null],[12,"target","","",34,null],[3,"ObjDecl","","",null,null],[12,"span","","",35,null],[12,"kind","","",35,null],[12,"names","","",35,null],[12,"subtype","","",35,null],[12,"detail","","",35,null],[12,"init","","",35,null],[3,"CompDecl","","A component declaration.",null,null],[12,"id","","",36,null],[12,"span","","",36,null],[12,"name","","",36,null],[12,"generics","","",36,null],[12,"ports","","",36,null],[3,"DisconSpec","","",null,null],[12,"span","","",37,null],[12,"target","","",37,null],[12,"ty","","",37,null],[12,"after","","",37,null],[3,"BlockCompCfg","","",null,null],[12,"span","","",38,null],[12,"spec","","",38,null],[12,"bind","","",38,null],[12,"decls","","",38,null],[3,"BindingInd","","",null,null],[12,"span","","",39,null],[12,"entity","","",39,null],[12,"generics","","",39,null],[12,"ports","","",39,null],[3,"CfgSpec","","",null,null],[12,"span","","",40,null],[12,"spec","","",40,null],[12,"bind","","",40,null],[12,"vunits","","",40,null],[3,"AttrDecl","","",null,null],[12,"id","","",41,null],[12,"span","","",41,null],[12,"name","","",41,null],[12,"data","","",41,null],[3,"GroupDecl","","",null,null],[12,"id","","",42,null],[12,"span","","",42,null],[12,"name","","",42,null],[12,"data","","",42,null],[3,"ParenElem","","A parenthesized expression element. A parenthesized expression contains elements of which each may either be a simple `<expr>`, or an association of the form `<choices> => <expr>`.",null,null],[12,"span","","",43,null],[12,"choices","","",43,null],[12,"expr","","",43,null],[3,"Expr","","An expression.",null,null],[12,"span","","",44,null],[12,"data","","",44,null],[3,"TypeDecl","","A type declaration. If the `data` field is omitted, this is an incomplete declaration.",null,null],[12,"id","","",45,null],[12,"span","","",45,null],[12,"name","","",45,null],[12,"data","","",45,null],[3,"Stmt","","",null,null],[12,"span","","",46,null],[12,"label","","",46,null],[12,"data","","",46,null],[3,"GenBody","","",null,null],[12,"span","","",47,null],[12,"decls","","",47,null],[12,"stmts","","",47,null],[3,"Wave","","",null,null],[12,"span","","",48,null],[12,"elems","","",48,null],[3,"CondWave","","A conditional wave.",null,null],[12,"0","","",49,null],[12,"1","","",49,null],[3,"SelectWave","","A selected wave. The second element of the tuple represents the choices for which this wave would be selected.",null,null],[12,"0","","",50,null],[12,"1","","",50,null],[3,"Signature","","",null,null],[12,"span","","",51,null],[12,"args","","",51,null],[12,"retty","","",51,null],[4,"DesignUnitData","","",null,null],[13,"EntityDecl","","",52,null],[13,"CfgDecl","","",52,null],[13,"PkgDecl","","",52,null],[13,"PkgInst","","",52,null],[13,"CtxDecl","","",52,null],[13,"ArchBody","","",52,null],[13,"PkgBody","","",52,null],[4,"CtxItem","","A context item, multiple of which make up a context clause.",null,null],[13,"LibClause","","",53,null],[13,"UseClause","","",53,null],[13,"CtxRef","","",53,null],[4,"PrimaryNameKind","","",null,null],[13,"Ident","","",54,null],[13,"Char","","",54,null],[13,"String","","",54,null],[4,"NamePart","","",null,null],[13,"Select","","",55,null],[13,"SelectAll","","",55,null],[13,"Signature","","",55,null],[13,"Attribute","","",55,null],[13,"Call","","",55,null],[13,"Range","","",55,null],[4,"IntfDecl","","An interface declaration.",null,null],[13,"TypeDecl","","",56,null],[13,"SubprogSpec","","",56,null],[13,"PkgInst","","",56,null],[13,"ObjDecl","","",56,null],[4,"SubprogDefault","","",null,null],[13,"Any","","",57,null],[13,"Name","","",57,null],[4,"IntfObjKind","","",null,null],[13,"Const","","",58,null],[13,"Signal","","",58,null],[13,"Var","","",58,null],[13,"File","","",58,null],[4,"IntfMode","","",null,null],[13,"In","","",59,null],[13,"Out","","",59,null],[13,"Inout","","",59,null],[13,"Buffer","","",59,null],[13,"Linkage","","",59,null],[4,"DeclItem","","A declarative item.",null,null],[13,"PkgBody","","",60,null],[13,"PkgInst","","",60,null],[13,"PkgDecl","","",60,null],[13,"TypeDecl","","",60,null],[13,"SubtypeDecl","","",60,null],[13,"ObjDecl","","",60,null],[13,"AliasDecl","","",60,null],[13,"UseClause","","",60,null],[13,"SubprogDecl","","",60,null],[13,"CompDecl","","",60,null],[13,"DisconDecl","","",60,null],[13,"CfgSpec","","",60,null],[13,"AttrDecl","","",60,null],[13,"PortgenMap","","",60,null],[13,"PortgenClause","","",60,null],[13,"GroupDecl","","",60,null],[13,"VunitBindInd","","",60,null],[13,"BlockCompCfg","","",60,null],[4,"PortgenKind","","",null,null],[13,"Port","","",61,null],[13,"Generic","","",61,null],[4,"SubprogData","","",null,null],[13,"Decl","","",62,null],[13,"Inst","","",62,null],[12,"name","moore_vhdl::syntax::ast::SubprogData","",62,null],[12,"generics","","",62,null],[13,"Body","moore_vhdl::syntax::ast","",62,null],[12,"decls","moore_vhdl::syntax::ast::SubprogData","",62,null],[12,"stmts","","",62,null],[4,"SubprogPurity","moore_vhdl::syntax::ast","",null,null],[13,"Pure","","",63,null],[13,"Impure","","",63,null],[4,"SubprogKind","","",null,null],[13,"Proc","","",64,null],[13,"Func","","",64,null],[4,"ResolInd","","",null,null],[13,"Exprs","","",65,null],[13,"Name","","",65,null],[4,"ObjKind","","",null,null],[13,"Const","","",66,null],[13,"Signal","","",66,null],[13,"File","","",66,null],[13,"Var","","",66,null],[13,"SharedVar","","",66,null],[4,"ObjDetail","","Additional mutually exclusive details that may be provided with an object declaration.",null,null],[13,"Register","","",67,null],[13,"Bus","","",67,null],[13,"Open","","A file opening action.",67,null],[4,"DisconTarget","","",null,null],[13,"Others","","",68,null],[13,"All","","",68,null],[13,"Signals","","",68,null],[4,"BlockCompSpec","","",null,null],[13,"CompOthers","","",69,null],[13,"CompAll","","",69,null],[13,"CompNames","","",69,null],[13,"Block","","",69,null],[4,"EntityAspect","","",null,null],[13,"Entity","","",70,null],[13,"Cfg","","",70,null],[13,"Open","","",70,null],[4,"AttrData","","",null,null],[13,"Decl","","",71,null],[13,"Spec","","",71,null],[12,"target","moore_vhdl::syntax::ast::AttrData","",71,null],[12,"cls","","",71,null],[12,"expr","","",71,null],[4,"AttrTarget","moore_vhdl::syntax::ast","",null,null],[13,"Others","","",72,null],[13,"All","","",72,null],[13,"List","","",72,null],[4,"EntityClass","","",null,null],[13,"Arch","","",73,null],[13,"Comp","","",73,null],[13,"Cfg","","",73,null],[13,"Const","","",73,null],[13,"Entity","","",73,null],[13,"File","","",73,null],[13,"Func","","",73,null],[13,"Group","","",73,null],[13,"Label","","",73,null],[13,"Literal","","",73,null],[13,"Pkg","","",73,null],[13,"Proc","","",73,null],[13,"Prop","","",73,null],[13,"Seq","","",73,null],[13,"Signal","","",73,null],[13,"Subtype","","",73,null],[13,"Type","","",73,null],[13,"Units","","",73,null],[13,"Var","","",73,null],[4,"GroupData","","",null,null],[13,"Decl","","A group declaration.",74,null],[13,"Temp","","A group template. Each element consists of an entity class, and a bool that indicates whether a `<>` was present in the source text.",74,null],[4,"ExprData","","The data associated with a specific expression.",null,null],[13,"NullExpr","","",75,null],[13,"OpenExpr","","",75,null],[13,"OthersExpr","","",75,null],[13,"DefaultExpr","","",75,null],[13,"BoxExpr","","",75,null],[13,"NewExpr","","",75,null],[13,"LitExpr","","",75,null],[13,"ResolExpr","","",75,null],[13,"ParenExpr","","",75,null],[13,"DoubleNameExpr","","",75,null],[13,"QualExpr","","",75,null],[13,"NameExpr","","",75,null],[13,"UnaryExpr","","",75,null],[13,"BinaryExpr","","",75,null],[4,"UnaryOp","","",null,null],[13,"Not","","",76,null],[13,"Abs","","",76,null],[13,"Sign","","",76,null],[13,"Logical","","",76,null],[13,"Inertial","","",76,null],[13,"Condition","","",76,null],[4,"BinaryOp","","",null,null],[13,"Dir","","",77,null],[13,"Logical","","",77,null],[13,"Rel","","",77,null],[13,"Match","","",77,null],[13,"Shift","","",77,null],[13,"Add","","",77,null],[13,"Sub","","",77,null],[13,"Concat","","",77,null],[13,"Mul","","",77,null],[13,"Div","","",77,null],[13,"Mod","","",77,null],[13,"Rem","","",77,null],[13,"Pow","","",77,null],[4,"Dir","","",null,null],[13,"To","","",78,null],[13,"Downto","","",78,null],[4,"Sign","","",null,null],[13,"Pos","","",79,null],[13,"Neg","","",79,null],[4,"LogicalOp","","",null,null],[13,"And","","",80,null],[13,"Or","","",80,null],[13,"Nand","","",80,null],[13,"Nor","","",80,null],[13,"Xor","","",80,null],[13,"Xnor","","",80,null],[4,"RelationalOp","","",null,null],[13,"Eq","","",81,null],[13,"Neq","","",81,null],[13,"Lt","","",81,null],[13,"Leq","","",81,null],[13,"Gt","","",81,null],[13,"Geq","","",81,null],[4,"ShiftOp","","",null,null],[13,"Sll","","",82,null],[13,"Srl","","",82,null],[13,"Sla","","",82,null],[13,"Sra","","",82,null],[13,"Rol","","",82,null],[13,"Ror","","",82,null],[4,"TypeData","","",null,null],[13,"EnumType","","",83,null],[13,"RangeType","","",83,null],[13,"ArrayType","","",83,null],[13,"RecordType","","",83,null],[13,"AccessType","","",83,null],[13,"FileType","","",83,null],[13,"ProtectedType","","",83,null],[4,"StmtData","","",null,null],[13,"WaitStmt","","",84,null],[12,"on","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"until","","",84,null],[12,"time","","",84,null],[13,"AssertStmt","moore_vhdl::syntax::ast","",84,null],[12,"cond","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"report","","",84,null],[12,"severity","","",84,null],[13,"ReportStmt","moore_vhdl::syntax::ast","",84,null],[12,"msg","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"severity","","",84,null],[13,"IfStmt","moore_vhdl::syntax::ast","",84,null],[12,"conds","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"alt","","",84,null],[13,"CaseStmt","moore_vhdl::syntax::ast","",84,null],[12,"qm","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"switch","","",84,null],[12,"cases","","",84,null],[13,"LoopStmt","moore_vhdl::syntax::ast","",84,null],[12,"scheme","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"stmts","","",84,null],[13,"NexitStmt","moore_vhdl::syntax::ast","",84,null],[12,"mode","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"target","","",84,null],[12,"cond","","",84,null],[13,"ReturnStmt","moore_vhdl::syntax::ast","",84,null],[13,"NullStmt","","",84,null],[13,"IfGenStmt","","",84,null],[12,"conds","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"alt","","",84,null],[13,"CaseGenStmt","moore_vhdl::syntax::ast","",84,null],[12,"switch","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"cases","","",84,null],[13,"ForGenStmt","moore_vhdl::syntax::ast","",84,null],[12,"param","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"range","","",84,null],[12,"body","","",84,null],[13,"BlockStmt","moore_vhdl::syntax::ast","",84,null],[12,"guard","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"decls","","",84,null],[12,"stmts","","",84,null],[13,"ProcStmt","moore_vhdl::syntax::ast","",84,null],[12,"sensitivity","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"decls","","",84,null],[12,"stmts","","",84,null],[12,"postponed","","",84,null],[13,"AssignStmt","moore_vhdl::syntax::ast","",84,null],[12,"target","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"kind","","",84,null],[12,"guarded","","",84,null],[12,"mode","","",84,null],[13,"SelectAssignStmt","moore_vhdl::syntax::ast","",84,null],[12,"select","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"qm","","",84,null],[12,"target","","",84,null],[12,"kind","","",84,null],[12,"guarded","","",84,null],[12,"mode","","",84,null],[12,"waves","","",84,null],[13,"InstOrCallStmt","moore_vhdl::syntax::ast","",84,null],[12,"target","moore_vhdl::syntax::ast::StmtData","",84,null],[12,"name","","",84,null],[12,"generics","","",84,null],[12,"ports","","",84,null],[4,"LoopScheme","moore_vhdl::syntax::ast","",null,null],[13,"While","","",85,null],[13,"For","","",85,null],[13,"Loop","","",85,null],[4,"NexitMode","","",null,null],[13,"Next","","",86,null],[13,"Exit","","",86,null],[4,"Sensitivity","","",null,null],[13,"All","","",87,null],[13,"List","","",87,null],[4,"AssignTarget","","",null,null],[13,"Name","","",88,null],[13,"Aggregate","","",88,null],[4,"InstTarget","","",null,null],[13,"Comp","","",89,null],[13,"Entity","","",89,null],[13,"Cfg","","",89,null],[4,"AssignKind","","",null,null],[13,"Signal","","",90,null],[13,"Var","","",90,null],[4,"AssignMode","","",null,null],[13,"Release","","",91,null],[13,"Force","","",91,null],[13,"Normal","","",91,null],[4,"SelectAssignMode","","",null,null],[13,"Force","","",92,null],[13,"Normal","","",92,null],[4,"ForceMode","","",null,null],[13,"In","","",93,null],[13,"Out","","",93,null],[4,"DelayMech","","",null,null],[13,"Transport","","",94,null],[13,"Inertial","","",94,null],[13,"InertialReject","","",94,null],[17,"DUMMY_NODE_ID","","During parsing and syntax tree construction, we assign each node this ID. Only later, during the renumbering pass do we assign actual IDs to each node.",null,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"cmp","","",95,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"ordering"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",95,{"inputs":[{"name":"usize"}],"output":{"name":"nodeid"}}],[11,"from_u32","","",95,{"inputs":[{"name":"u32"}],"output":{"name":"nodeid"}}],[11,"as_usize","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_u32","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"nodeid"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"designunit"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"designunit"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"designunit"}],"output":{"name":"bool"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"designunitdata"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"designunitdata"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"designunitdata"}],"output":{"name":"bool"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"ctxitem"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"ctxitem"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"ctxitem"}],"output":{"name":"bool"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from","","",19,{"inputs":[{"name":"spanned"}],"output":{"name":"ident"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"compoundname"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"compoundname"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"compoundname"}],"output":{"name":"bool"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"primaryname"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"primaryname"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"primaryname"}],"output":{"name":"bool"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"primarynamekind"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"primarynamekind"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"primarynamekind"}],"output":{"name":"bool"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"namepart"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"namepart"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"namepart"}],"output":{"name":"bool"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"ctxdecl"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"ctxdecl"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"ctxdecl"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"entitydecl"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"entitydecl"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"entitydecl"}],"output":{"name":"bool"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cfgdecl"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"cfgdecl"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"cfgdecl"}],"output":{"name":"bool"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"archbody"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"archbody"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"archbody"}],"output":{"name":"bool"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"pkgdecl"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"pkgdecl"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"pkgdecl"}],"output":{"name":"bool"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"pkgbody"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"pkgbody"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"pkgbody"}],"output":{"name":"bool"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"pkginst"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"pkginst"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"pkginst"}],"output":{"name":"bool"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"intfdecl"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"intfdecl"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"intfdecl"}],"output":{"name":"bool"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"subprogdefault"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"subprogdefault"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"subprogdefault"}],"output":{"name":"bool"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"intfobjdecl"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"intfobjdecl"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"intfobjdecl"}],"output":{"name":"bool"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"intfobjkind"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"intfobjkind"}],"output":{"name":"bool"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"intfmode"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"intfmode"}],"output":{"name":"bool"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"declitem"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"declitem"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"declitem"}],"output":{"name":"bool"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"portgenkind"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"portgenkind"}],"output":{"name":"bool"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"subprog"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"subprog"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"subprog"}],"output":{"name":"bool"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"subprogdata"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"subprogdata"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"subprogdata"}],"output":{"name":"bool"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"subprogspec"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"subprogspec"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"subprogspec"}],"output":{"name":"bool"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"subprogpurity"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"subprogpurity"}],"output":{"name":"bool"}}],[11,"encode","","",63,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"subprogkind"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"subprogkind"}],"output":{"name":"bool"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"subtypeind"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"subtypeind"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"subtypeind"}],"output":{"name":"bool"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"subtypedecl"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"subtypedecl"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"subtypedecl"}],"output":{"name":"bool"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"resolind"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"resolind"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"resolind"}],"output":{"name":"bool"}}],[11,"encode","","",65,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"aliasdecl"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"aliasdecl"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"aliasdecl"}],"output":{"name":"bool"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"objdecl"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"objdecl"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"objdecl"}],"output":{"name":"bool"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"objkind"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"objkind"}],"output":{"name":"bool"}}],[11,"encode","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"objdetail"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"objdetail"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"objdetail"}],"output":{"name":"bool"}}],[11,"encode","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"compdecl"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"compdecl"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"compdecl"}],"output":{"name":"bool"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"disconspec"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"disconspec"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"disconspec"}],"output":{"name":"bool"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"discontarget"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"discontarget"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"discontarget"}],"output":{"name":"bool"}}],[11,"encode","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"blockcompcfg"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"blockcompcfg"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"blockcompcfg"}],"output":{"name":"bool"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"blockcompspec"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"blockcompspec"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"blockcompspec"}],"output":{"name":"bool"}}],[11,"encode","","",69,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bindingind"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"bindingind"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"bindingind"}],"output":{"name":"bool"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"entityaspect"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"entityaspect"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"entityaspect"}],"output":{"name":"bool"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"cfgspec"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"cfgspec"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"cfgspec"}],"output":{"name":"bool"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"attrdecl"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"attrdecl"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"attrdecl"}],"output":{"name":"bool"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"attrdata"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"attrdata"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"attrdata"}],"output":{"name":"bool"}}],[11,"encode","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"attrtarget"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"attrtarget"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"attrtarget"}],"output":{"name":"bool"}}],[11,"encode","","",72,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"entityclass"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"entityclass"}],"output":{"name":"bool"}}],[11,"encode","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"groupdecl"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"groupdecl"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"groupdecl"}],"output":{"name":"bool"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"groupdata"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"groupdata"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"groupdata"}],"output":{"name":"bool"}}],[11,"encode","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"parenelem"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"parenelem"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"parenelem"}],"output":{"name":"bool"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"exprdata"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"exprdata"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"exprdata"}],"output":{"name":"bool"}}],[11,"encode","","",75,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"unaryop"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"unaryop"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"unaryop"}],"output":{"name":"bool"}}],[11,"encode","","",76,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"binaryop"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"binaryop"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"binaryop"}],"output":{"name":"bool"}}],[11,"encode","","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"dir"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"dir"}],"output":{"name":"bool"}}],[11,"encode","","",78,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"encode","","",79,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"logicalop"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"logicalop"}],"output":{"name":"bool"}}],[11,"encode","","",80,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"relationalop"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"relationalop"}],"output":{"name":"bool"}}],[11,"encode","","",81,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"shiftop"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"shiftop"}],"output":{"name":"bool"}}],[11,"encode","","",82,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"typedecl"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"typedecl"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"typedecl"}],"output":{"name":"bool"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"typedata"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"typedata"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"typedata"}],"output":{"name":"bool"}}],[11,"encode","","",83,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"stmtdata"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"stmtdata"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"stmtdata"}],"output":{"name":"bool"}}],[11,"encode","","",84,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"loopscheme"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"loopscheme"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"loopscheme"}],"output":{"name":"bool"}}],[11,"encode","","",85,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"nexitmode"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"nexitmode"}],"output":{"name":"bool"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"genbody"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"genbody"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"genbody"}],"output":{"name":"bool"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"sensitivity"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"sensitivity"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"sensitivity"}],"output":{"name":"bool"}}],[11,"encode","","",87,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"assigntarget"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"assigntarget"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"assigntarget"}],"output":{"name":"bool"}}],[11,"encode","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"insttarget"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"insttarget"}],"output":{"name":"bool"}}],[11,"encode","","",89,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"assignkind"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"assignkind"}],"output":{"name":"bool"}}],[11,"encode","","",90,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"assignmode"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"assignmode"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"assignmode"}],"output":{"name":"bool"}}],[11,"encode","","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"selectassignmode"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"selectassignmode"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"selectassignmode"}],"output":{"name":"bool"}}],[11,"encode","","",92,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"forcemode"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"forcemode"}],"output":{"name":"bool"}}],[11,"encode","","",93,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"delaymech"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"delaymech"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"delaymech"}],"output":{"name":"bool"}}],[11,"encode","","",94,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"wave"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"wave"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"wave"}],"output":{"name":"bool"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"condwave"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"condwave"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"condwave"}],"output":{"name":"bool"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"selectwave"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"selectwave"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"selectwave"}],"output":{"name":"bool"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}]],"paths":[[4,"Category"],[3,"Categorizer"],[4,"Bundle"],[3,"Bundler"],[3,"Tokenizer"],[3,"Exponent"],[4,"Token"],[4,"Literal"],[4,"DelimToken"],[4,"ExponentSign"],[4,"BitStringBase"],[4,"Kw"],[3,"Lexer"],[8,"TokenStream"],[4,"ExprPrec"],[3,"Recovered"],[3,"Reported"],[3,"BasicParser"],[3,"DesignUnit"],[3,"Ident"],[3,"CompoundName"],[3,"PrimaryName"],[3,"CtxDecl"],[3,"EntityDecl"],[3,"CfgDecl"],[3,"ArchBody"],[3,"PkgDecl"],[3,"PkgBody"],[3,"PkgInst"],[3,"IntfObjDecl"],[3,"Subprog"],[3,"SubprogSpec"],[3,"SubtypeInd"],[3,"SubtypeDecl"],[3,"AliasDecl"],[3,"ObjDecl"],[3,"CompDecl"],[3,"DisconSpec"],[3,"BlockCompCfg"],[3,"BindingInd"],[3,"CfgSpec"],[3,"AttrDecl"],[3,"GroupDecl"],[3,"ParenElem"],[3,"Expr"],[3,"TypeDecl"],[3,"Stmt"],[3,"GenBody"],[3,"Wave"],[3,"CondWave"],[3,"SelectWave"],[3,"Signature"],[4,"DesignUnitData"],[4,"CtxItem"],[4,"PrimaryNameKind"],[4,"NamePart"],[4,"IntfDecl"],[4,"SubprogDefault"],[4,"IntfObjKind"],[4,"IntfMode"],[4,"DeclItem"],[4,"PortgenKind"],[4,"SubprogData"],[4,"SubprogPurity"],[4,"SubprogKind"],[4,"ResolInd"],[4,"ObjKind"],[4,"ObjDetail"],[4,"DisconTarget"],[4,"BlockCompSpec"],[4,"EntityAspect"],[4,"AttrData"],[4,"AttrTarget"],[4,"EntityClass"],[4,"GroupData"],[4,"ExprData"],[4,"UnaryOp"],[4,"BinaryOp"],[4,"Dir"],[4,"Sign"],[4,"LogicalOp"],[4,"RelationalOp"],[4,"ShiftOp"],[4,"TypeData"],[4,"StmtData"],[4,"LoopScheme"],[4,"NexitMode"],[4,"Sensitivity"],[4,"AssignTarget"],[4,"InstTarget"],[4,"AssignKind"],[4,"AssignMode"],[4,"SelectAssignMode"],[4,"ForceMode"],[4,"DelayMech"],[3,"NodeId"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",17,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",17,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",17,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",17,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",17,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"abs","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",17,null],[11,"hash","","",18,null],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",17,null],[11,"div_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_i64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"neg","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",18,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",2,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",3,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[11,"add","num_bigint::big_digit","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[6,"BigDigit"],[6,"DoubleBigDigit"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"approximate_float","","",0,{"inputs":[{"name":"f"}],"output":{"name":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[3,"OwningRef","owning_ref","An owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[8,"StableAddress","","Marker trait for expressing that the memory address of the value reachable via a dereference remains identical even if `self` gets moved.",null,null],[8,"CloneStableAddress","","Marker trait for expressing that the memory address of the value reachable via a dereference remains identical even if `self` is a clone.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but dosen’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Variant of `map()` that may fail.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the onwer is wrapped in an additional `Box<O>`.",1,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",1,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",1,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",1,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",2,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",2,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}]],"paths":[[8,"IntoErased"],[3,"OwningRef"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec<u8>` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&[u8]` in order to serialize into a byte array.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytebuf"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",0,null],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_unit","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","",1,null],[11,"visit_byte_buf","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"visit_str","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"new","","Wrap an existing `&[u8]`.",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",2,null],[11,"deref","","",2,null],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by `Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option<T>` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"FieldName","","Represents a struct field name.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"VariantName","","Represents an enum variant name.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements Deserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_str","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_unit","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",7,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",8,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",9,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",10,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",11,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",12,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",13,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",14,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",15,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",16,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",17,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",18,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",19,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",20,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",21,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",22,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",23,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",24,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",25,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",26,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",27,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",28,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*<T>`.",29,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_map","","",29,{"inputs":[{"name":"self"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*<T>`.",30,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_map","","",30,{"inputs":[{"name":"self"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","","",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",32,null],[13,"InvalidType","","The value had an incorrect type.",32,null],[13,"InvalidLength","","The value had an invalid length.",32,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",32,null],[13,"EndOfStream","","EOF while deserializing a value.",32,null],[13,"UnknownVariant","","Unknown variant in enum.",32,null],[13,"UnknownField","","Unknown field in struct.",32,null],[13,"MissingField","","Struct is missing a field.",32,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",33,null],[10,"into_deserializer","","Convert this value into a deserializer.",33,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",32,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",32,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_bool","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_struct_field","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",34,null],[11,"deserialize_ignored_any","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",35,null],[11,"deserialize_struct_field","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",35,null],[11,"deserialize_ignored_any","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",36,null],[11,"deserialize_struct_field","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",36,null],[11,"deserialize_ignored_any","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",37,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",37,null],[11,"deserialize_struct_field","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",37,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",37,null],[11,"deserialize_ignored_any","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",37,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",38,null],[11,"deserialize_struct_field","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",38,null],[11,"deserialize_ignored_any","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",39,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",39,null],[11,"deserialize_struct_field","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",39,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",39,null],[11,"deserialize_ignored_any","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",39,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",40,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",40,null],[11,"deserialize_struct_field","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",40,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",40,null],[11,"deserialize_ignored_any","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",41,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",41,null],[11,"deserialize_struct_field","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",41,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",41,null],[11,"deserialize_ignored_any","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",41,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",42,null],[11,"deserialize_struct_field","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",42,null],[11,"deserialize_ignored_any","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",43,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",43,null],[11,"deserialize_struct_field","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",43,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",43,null],[11,"deserialize_ignored_any","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",43,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",44,null],[11,"deserialize_struct_field","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",44,null],[11,"deserialize_ignored_any","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",44,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",45,null],[11,"deserialize_struct_field","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",45,null],[11,"deserialize_ignored_any","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",46,null],[11,"deserialize_struct_field","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",46,null],[11,"deserialize_ignored_any","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",47,null],[11,"deserialize_struct_field","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",47,null],[11,"deserialize_ignored_any","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",47,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",48,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",48,null],[11,"deserialize_struct_field","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",48,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",48,null],[11,"deserialize_ignored_any","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",48,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",49,null],[11,"deserialize_bool","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",49,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",49,null],[11,"deserialize_struct_field","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",49,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant","","",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",49,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",49,null],[11,"deserialize","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",50,null],[11,"deserialize_bool","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",50,null],[11,"deserialize_struct_field","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",50,null],[11,"deserialize","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",51,null],[11,"deserialize_bool","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",51,null],[11,"deserialize_struct_field","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",51,null],[11,"new","","Construct a new `SeqDeserializer<I>`.",52,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",52,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",52,null],[11,"deserialize_struct_field","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",52,null],[11,"deserialize_ignored_any","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit","","",52,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end","","",52,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",52,null],[11,"new","","Construct a new `SeqVisitorDeserializer<V_, E>`.",53,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",53,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",53,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",53,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",53,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",53,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",53,null],[11,"deserialize_struct_field","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",53,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",53,null],[11,"deserialize_ignored_any","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, K, V, E>` with a specific length.",54,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"unbounded","","Construct a new `MapDeserializer<I, K, V, E>` that is not bounded by a specific length and that delegates to `iter` for its size hint.",54,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deserialize","","",54,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",54,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",54,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",54,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",54,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",54,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",54,null],[11,"deserialize_struct_field","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",54,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",54,null],[11,"deserialize_ignored_any","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_key","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_value","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",54,null],[11,"visit","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",54,null],[11,"new","","Construct a new `MapVisitorDeserializer<V_, E>`.",55,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",55,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",55,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",55,null],[11,"deserialize_struct_field","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",55,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",55,null],[11,"deserialize_ignored_any","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",56,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",56,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",56,null],[11,"deserialize_struct_field","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",56,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",56,null],[11,"deserialize_ignored_any","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",57,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",57,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",57,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",57,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",57,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",57,null],[11,"deserialize_struct_field","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",57,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",57,null],[11,"deserialize_ignored_any","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a `Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",58,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",58,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",58,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",58,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same struct field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",59,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a value. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",60,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value. A reasonable default is to forward to `deserialize_f64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&str` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows deserializers that encode an optional value as a nullable value to convert the null value into a `None`, and a regular value as `Some(value)`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows deserializers to parse sequences that aren't tagged as sequences.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq_fixed_size","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows deserializers to parse arrays that aren't tagged as arrays.",60,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec<u8>`. This allows deserializers that provide a custom byte vector serialization to properly deserialize the type.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows deserializers to parse sequences that aren't tagged as maps.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows deserializers to a unit struct that aren't tagged as a unit struct.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows deserializers to a newtype struct that aren't tagged as a newtype struct. A reasonable default is to simply deserialize the expected value directly.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows deserializers to parse sequences that aren't tagged as sequences.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows deserializers to parse sequences that aren't tagged as maps.",60,null],[10,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field name.  This allows deserializers to choose between &str, usize, or &[u8] to properly deserialize a struct field.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows deserializers that provide a custom tuple serialization to properly deserialize the type.",60,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows deserializers that provide a custom enumeration serialization to properly deserialize the type.",60,null],[10,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",61,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","`visit_str` deserializes a `&str` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid a copy if it is deserializing a string from a `String` type.  By default it passes a `&str` to the `visit_str` method.",61,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` deserializes a `&[u8]` into a `Value`.",61,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec<u8>` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",62,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",62,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",63,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining items.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",63,null],[11,"missing_field","","Report that the struct has a field that wasn't deserialized",63,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the `Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",64,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",64,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",65,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",65,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",65,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. A good default is often to use the `visit_tuple` method to deserialize a `(value,)`.",65,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant. If no tuple variants are expected, yield a `Err(serde::de::Error::invalid_type(serde::de::Type::TupleVariant))`",65,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant. If no struct variants are expected, yield a `Err(serde::de::Error::invalid_type(serde::de::Type::StructVariant))`",65,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position's line and column.",null,null],[11,"new","","Construct a new `LineColIterator<Iter>`.",66,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col","","Report the current column inside the iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_ref","","Gets a reference to the underlying iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","peeks at the next value",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ser","serde","Generic serialization framework. # For Developers who want to serialize objects Implement the `Serialize` trait for the type of objects you want to serialize. Call methods of the `serializer` object. For which methods to call and how to do so, look at the documentation of the `Serializer` trait.",null,null],[0,"impls","serde::ser","Implementations for all of Rust's builtin types. Tuples implement the `Serialize` trait if they have at most 16 fields. Arrays implement the `Serialize` trait if their length is 32 or less. You can always forward array serialization to slice serialization, which works for any length. Long tuples are best replaced by tuple structs, for which you can use `derive(Serialize)`. In that case the number of fields is irrelevant.",null,null],[8,"Error","","`Error` is a trait that allows a `Serialize` to generically create a `Serializer` error.",null,null],[10,"custom","","Raised when there is a general error when serializing a type.",67,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",67,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",69,null],[16,"SeqState","","A state object that is initialized by `serialize_seq`, passed to `serialize_seq_elt`, and consumed by `serialize_seq_end`. Use `()` if no state is required.",69,null],[16,"TupleState","","A state object that is initialized by `serialize_tuple`, passed to `serialize_tuple_elt`, and consumed by `serialize_tuple_end`. Use `()` if no state is required.",69,null],[16,"TupleStructState","","A state object that is initialized by `serialize_tuple_struct`, passed to `serialize_tuple_struct_elt`, and consumed by `serialize_tuple_struct_end`. Use `()` if no state is required.",69,null],[16,"TupleVariantState","","A state object that is initialized by `serialize_tuple_variant`, passed to `serialize_tuple_variant_elt`, and consumed by `serialize_tuple_variant_end`. Use `()` if no state is required.",69,null],[16,"MapState","","A state object that is initialized by `serialize_map`, passed to `serialize_map_elt`, and consumed by `serialize_map_end`. Use `()` if no state is required.",69,null],[16,"StructState","","A state object that is initialized by `serialize_struct`, passed to `serialize_struct_elt`, and consumed by `serialize_struct_end`. Use `()` if no state is required.",69,null],[16,"StructVariantState","","A state object that is initialized by `serialize_struct_variant`, passed to `serialize_struct_variant_elt`, and consumed by `serialize_struct_variant_end`. Use `()` if no state is required.",69,null],[10,"serialize_bool","","Serializes a `bool` value.",69,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_isize","","Serializes an `isize` value. If the format does not differentiate between `isize` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serializes an `i8` value. If the format does not differentiate between `i8` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serializes an `i16` value. If the format does not differentiate between `i16` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serializes an `i32` value. If the format does not differentiate between `i32` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serializes an `i64` value.",69,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_usize","","Serializes a `usize` value. If the format does not differentiate between `usize` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serializes a `u8` value. If the format does not differentiate between `u8` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serializes a `u16` value. If the format does not differentiate between `u16` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serializes a `u32` value. If the format does not differentiate between `u32` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","`Serializes a`u64` value.",69,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serializes an `f32` value. If the format does not differentiate between `f32` and `f64`, a reasonable implementation would be to cast the value to `f64` and forward to `serialize_f64`.",69,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serializes an `f64` value.",69,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serializes a character. If the format does not support characters, it is reasonable to serialize it as a single element `str` or a `u32`.",69,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serializes a `&str`.",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Enables serializers to serialize byte slices more compactly or more efficiently than other types of slices. If no efficient implementation is available, a reasonable implementation would be to forward to `serialize_seq`. If forwarded, the implementation looks usually just like this: `rust let mut state = try!(self.serialize_seq(value)); for b in value { try!(self.serialize_seq_elt(&mut state, b)); } self.serialize_seq_end(state)`",69,null],[10,"serialize_unit","","Serializes a `()` value. It's reasonable to just not serialize anything.",69,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serializes a unit struct value. A reasonable implementation would be to forward to `serialize_unit`.",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments. A reasonable implementation would be to forward to `serialize_unit`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a newtype struct, to be more efficiently serialized than a tuple struct with multiple items. A reasonable implementation would be to forward to `serialize_tuple_struct` or to just serialize the inner value without wrapping.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently serialized than a variant with multiple items. A reasonable implementation would be to forward to `serialize_tuple_variant`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_none","","Serializes a `None` value.",69,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serializes a `Some(...)` value.",69,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begins to serialize a sequence. This call must be followed by zero or more calls to `serialize_seq_elt`, then a call to `serialize_seq_end`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_seq_elt","","Serializes a sequence element. Must have previously called `serialize_seq`.",69,null],[10,"serialize_seq_end","","Finishes serializing a sequence.",69,null],[10,"serialize_seq_fixed_size","","Begins to serialize a sequence whose length will be known at deserialization time. This call must be followed by zero or more calls to `serialize_seq_elt`, then a call to `serialize_seq_end`. A reasonable implementation would be to forward to `serialize_seq`.",69,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begins to serialize a tuple. This call must be followed by zero or more calls to `serialize_tuple_elt`, then a call to `serialize_tuple_end`. A reasonable implementation would be to forward to `serialize_seq`.",69,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_elt","","Serializes a tuple element. Must have previously called `serialize_tuple`.",69,null],[10,"serialize_tuple_end","","Finishes serializing a tuple.",69,null],[10,"serialize_tuple_struct","","Begins to serialize a tuple struct. This call must be followed by zero or more calls to `serialize_tuple_struct_elt`, then a call to `serialize_tuple_struct_end`. A reasonable implementation would be to forward to `serialize_tuple`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct_elt","","Serializes a tuple struct element. Must have previously called `serialize_tuple_struct`.",69,null],[10,"serialize_tuple_struct_end","","Finishes serializing a tuple struct.",69,null],[10,"serialize_tuple_variant","","Begins to serialize a tuple variant. This call must be followed by zero or more calls to `serialize_tuple_variant_elt`, then a call to `serialize_tuple_variant_end`. A reasonable implementation would be to forward to `serialize_tuple_struct`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant_elt","","Serializes a tuple variant element. Must have previously called `serialize_tuple_variant`.",69,null],[10,"serialize_tuple_variant_end","","Finishes serializing a tuple variant.",69,null],[10,"serialize_map","","Begins to serialize a map. This call must be followed by zero or more calls to `serialize_map_key` and `serialize_map_value`, then a call to `serialize_map_end`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_map_key","","Serialize a map key. Must have previously called `serialize_map`.",69,null],[10,"serialize_map_value","","Serialize a map value. Must have previously called `serialize_map`.",69,null],[10,"serialize_map_end","","Finishes serializing a map.",69,null],[10,"serialize_struct","","Begins to serialize a struct. This call must be followed by zero or more calls to `serialize_struct_elt`, then a call to `serialize_struct_end`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_elt","","Serializes a struct field. Must have previously called `serialize_struct`.",69,null],[10,"serialize_struct_end","","Finishes serializing a struct.",69,null],[10,"serialize_struct_variant","","Begins to serialize a struct variant. This call must be followed by zero or more calls to `serialize_struct_variant_elt`, then a call to `serialize_struct_variant_end`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant_elt","","Serialize a struct variant element. Must have previously called `serialize_struct_variant`.",69,null],[10,"serialize_struct_variant_end","","Finishes serializing a struct variant.",69,null],[14,"forward_to_deserialize","serde","Helper to forward `Deserializer` methods to `Deserializer::deserialize`. Every given method ignores all arguments and forwards to `deserialize`. Note that `deserialize_enum` simply returns an `Error::invalid_type`; a better approach is tracked in [serde-rs/serde#521][1].",null,null]],"paths":[[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[8,"Error"],[8,"Serialize"],[8,"Serializer"]]};
searchIndex["sha1"] = {"doc":"A minimal implementation of SHA1 for rust.","items":[[3,"Sha1","sha1","Represents a Sha1 hash object in memory.",null,null],[3,"Digest","","Digest generated from a `Sha1` instance.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"sha1"}}],[11,"new","","Creates an fresh sha1 hash object.",0,{"inputs":[],"output":{"name":"sha1"}}],[11,"reset","","Resets the hash object to it's initial state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","Update hash with input data.",0,null],[11,"digest","","Retrieve digest result.",0,{"inputs":[{"name":"self"}],"output":{"name":"digest"}}],[11,"bytes","","Returns the 160 bit (20 byte) digest as a byte array.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Sha1"],[3,"Digest"]]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector. Returns a vector of corresponding values between 0.0 and 1.0 (higher value means more similar).",null,null],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"osa_distance_against_vec","","Calculates the optimal string alignment distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[6,"HammingResult","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"strsimerror"}],"output":{"name":"bool"}}]],"paths":[[4,"StrSimError"]]};
searchIndex["term_size"] = {"doc":"System calls for getting the terminal size.","items":[[5,"dimensions","term_size","Query the current processes's output (`stdout`), input (`stdin`), and error (`stderr`) in that order, in the attempt to dtermine terminal width. If one of those streams is actually a tty, this function returns its width and height as a number of characters.",null,{"inputs":[],"output":{"name":"option"}}],[5,"dimensions_stdout","","Query the current processes's output (`stdout`) only, in the attempt to dtermine terminal width. If that streams is actually a tty, this function returns its width and height as a number of characters.",null,{"inputs":[],"output":{"name":"option"}}],[5,"dimensions_stdin","","Query the current processes's input (`stdin`) only, in the attempt to dtermine terminal width. If that streams is actually a tty, this function returns its width and height as a number of characters.",null,{"inputs":[],"output":{"name":"option"}}],[5,"dimensions_stderr","","Query the current processes's error output (`stderr`) only, in the attempt to dtermine terminal width. If that streams is actually a tty, this function returns its width and height as a number of characters.",null,{"inputs":[],"output":{"name":"option"}}]],"paths":[]};
searchIndex["textwrap"] = {"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",null,null],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",null,null],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap`] and [`fill`] functions are not flexible enough.",null,null],[12,"width","","The width in columns at which the text will be wrapped.",0,null],[12,"initial_indent","","Indentation used for the first line of output.",0,null],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,null],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines be being longer than `self.width`.",0,null],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,null],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"string"}}],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"vec"}}],[5,"indent","","Add prefix to each non-empty line.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[5,"dedent","","Removes common leading whitespace from each line.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[8,"WordSplitter","","An interface for splitting words.",null,null],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"split","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"split","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,{"inputs":[{"name":"usize"}],"output":{"name":"wrapper"}}],[11,"with_termwidth","","Crate a new Wrapper for wrapping text at the current terminal width. If the terminal width cannot be determined (typically because the standard input and output is not connected to a terminal), a width of 80 characters will be used. Other settings use the same defaults as `Wrapper::new`.",0,{"inputs":[],"output":{"name":"wrapper"}}],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output. Setting it to something like `\"* \"` can be useful if you are formatting an item in a bulleted list. You will then probably want to set `self.subsequent_indent` to `\" \"`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output. Setting it to something like `\" \"` can be useful if you are formatting an item in a bulleted list.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"wrapper"}}],[11,"word_splitter","","Change [`self.splitter`]. The word splitter is consulted when a word is too wide to fit the current line. By changing this, you can decide if such words should be hyphenated or left alone. Hyphenation can be done using existing hyphens (see [`HyphenSplitter`]) or it can be based on TeX hyphenation patterns, if the `hyphenation` feature is enabled.",0,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"wrapper"}}],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}]],"paths":[[3,"Wrapper"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"]]};
searchIndex["unicode_segmentation"] = {"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29 rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string's grapheme clusters.",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",null,null],[3,"UWordBounds","","External iterator for a string's word boundaries.",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",null,null],[4,"GraphemeIncomplete","","An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.",null,null],[13,"PreContext","","More pre-context is needed. The caller should call `provide_context` with a chunk ending at the offset given, then retry the query. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"PrevChunk","","When requesting `prev_boundary`, the cursor is moving past the beginning of the current chunk, so the chunk before that is requested. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"NextChunk","","When requesting `next_boundary`, the cursor is moving past the end of the current chunk, so the chunk after that is requested. This will only be returned if the chunk ends before the `len` parameter provided on creation of the cursor.",0,null],[13,"InvalidOffset","","An error returned when the chunk given does not contain the cursor position.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"graphemeindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"graphemes"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"size_hint","","",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"graphemecursor"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new cursor. The string and initial offset are given at creation time, but the contents of the string are not. The `is_extended` parameter controls whether extended grapheme clusters are selected.",3,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"graphemecursor"}}],[11,"set_cursor","","Set the cursor to a new location in the same string.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value provided to `new()` or `set_cursor()`, or returned from `next_boundary()` or `prev_boundary()`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"provide_context","","Provide additional pre-context when it is needed to decide a boundary. The end of the chunk must coincide with the value given in the `GraphemeIncomplete::PreContext` request.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":null}],[11,"is_boundary","","Determine whether the current cursor location is a grapheme cluster boundary. Only a part of the string need be supplied. If `chunk_start` is nonzero or the length of `chunk` is not equal to `len` on creation, then this method may return `GraphemeIncomplete::PreContext`. The caller should then call `provide_context` with the requested chunk, then retry calling this method.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"next_boundary","","Find the next boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::NextChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk following the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"prev_boundary","","Find the previous boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::PrevChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk preceding the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[17,"UNICODE_VERSION","","The version of Unicode that this version of unicode-segmentation is based on.",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode Standard Annex #29.",null,null],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemes"}}],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See `graphemes()` for more information.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemeindices"}}],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"unicodewords"}}],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries, and their offsets. See `split_word_bounds()` for more information.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}]],"paths":[[4,"GraphemeIncomplete"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
initSearch(searchIndex);
